@{
    Layout = null;
    @using Microsoft.AspNetCore.Http
    @inject IHttpContextAccessor HttpContextAccessor
    int jobRole = HttpContextAccessor.HttpContext.Session.GetInt32("JobRole") ?? 0;
}
@model Employee
<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="icon" type="image/x-icon" href="/image/eye.jpg" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Alexandria:wght@100..900&display=swap" rel="stylesheet" />
    <link href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="~/css/SharedViews/ForgetPassword.css" asp-append-version="true" />

    <title>ThoTh</title>

</head>
<body>
    
    
    @if (TempData["Success"] != null)
    {
        <div class="notification success">
            <div class="notification-content">
                <i class='bx bx-check-circle'></i> @TempData["Success"]

            </div>
            <input type="hidden" id="successAlert" value="true" />
            <div class="progress-bar success"></div>
        </div>
    }

    @if (TempData["Error"] != null)
    {
        <div class="notification error">
            <div class="notification-content">
                <i class='bx bx-error-circle'></i>
                <span>@TempData["Error"]</span>
            </div>
            <input type="hidden" id="tempDataSuccess" value="false" />

            <div class="progress-bar error"></div>

        </div>
    }
        <div class="form-container">

        <h2>إنشاء كلمة مرور جديدة</h2>

        <form id="passwordForm" asp-controller="Employee" asp-action="RegisterNewPassword" method="post">
            <input type="hidden" asp-for="EmployeeId" />
            <input type="hidden" id="hdnJobRole" value="@jobRole" />

            <div class="input-control">
                <label for="Password" class="textlabel">كلمة المرور</label>
                <input type="password" id="Password" asp-for="EmployeePassword" autocomplete="new-password" class="place" required />
                <div class="strength-meter">
                    <div id="strengthFill" class="strength-meter-fill"></div>
                </div>
                <div id="strengthText" class="strength-text">&nbsp;</div>
            </div>

            <div class="input-control">
                <label for="ConfirmPassword" class="textlabel">تأكيد كلمة المرور</label>
                <input type="password" id="ConfirmPassword" name="ConfirmPassword" autocomplete="new-password" class="place" required />
                <div id="matchText" class="strength-text">&nbsp;</div>
            </div>

            <div class="button-container ">
            <input type="submit" id="submitBtn" class="btn" disabled value="تسجيل">
            </div>
        </form>
    </div>
   

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const passwordInput = document.getElementById('Password');
            const confirmInput = document.getElementById('ConfirmPassword');
            const strengthFill = document.getElementById('strengthFill');
            const strengthText = document.getElementById('strengthText');
            const matchText = document.getElementById('matchText');
            const submitBtn = document.getElementById('submitBtn');
            const form = document.getElementById('passwordForm');

            function evaluateStrength(pw) {
                let score = 0;
                if (pw.length >= 8) score += 1;
                if (/[A-Z]/.test(pw)) score += 1;
                if (/[a-z]/.test(pw)) score += 1;
                if (/[0-9]/.test(pw)) score += 1;
                if (/[^A-Za-z0-9]/.test(pw)) score += 1;
                return score;
            }

            function updateStrengthMeter() {
                const pw = passwordInput.value;
                const score = evaluateStrength(pw);
                const percent = (score / 5) * 100;
                strengthFill.style.width = percent + '%';

                let text = '';
                let color = '#ff4d4d';
                switch (score) {
                    case 0:
                    case 1:
                        text = 'ضعيفة'; color = '#ff4d4d'; break;
                    case 2:
                    case 3:
                        text = 'متوسطة'; color = '#ffcc00'; break;
                    case 4:
                        text = 'قوية'; color = '#66cc66'; break;
                    case 5:
                        text = 'قوية جداً'; color = '#009933'; break;
                }
                strengthFill.style.backgroundColor = color;
                strengthText.textContent = text;
                checkFormValidity();
            }

            function checkMatch() {
                if (!confirmInput.value) {
                    matchText.textContent = '';
                    return;
                }
                if (passwordInput.value === confirmInput.value) {
                    matchText.textContent = 'متطابقة';
                    matchText.style.color = '#009933';
                } else {
                    matchText.textContent = 'غير متطابقة';
                    matchText.style.color = '#ff4d4d';
                }
                checkFormValidity();
            }

            function checkFormValidity() {
                const validStrength = evaluateStrength(passwordInput.value) >= 3;
                const match = passwordInput.value && (passwordInput.value === confirmInput.value);
                const isValid = validStrength && match;
                submitBtn.disabled = !isValid;
                return isValid;
            }

            passwordInput.addEventListener('input', updateStrengthMeter);
            confirmInput.addEventListener('input', checkMatch);

            form.addEventListener('submit', function (e) {
                if (!checkFormValidity()) {
                    e.preventDefault();
                    return false;
                }
                submitBtn.disabled = true;
                submitBtn.value = 'جاري المعالجة...';
            });

            // Redirect logic on success
            const successAlert = document.getElementById('successAlert');
            if (successAlert) {
                const jobRoleVal = parseInt(document.getElementById('hdnJobRole').value) || 0;
                const redirectRoutes = {
                    1: '/employee/LoginPage',
                    2: '/employee/LoginPage',
                    3: '/employee/LoginPage',
                    4: '/employee/LoginPage',
                    5: '/employee/LoginPage',
                    6: '/employee/LoginPage',
                    7: '/employee/LoginPage',
                    8: '/employee/LoginPage'
                };

                setTimeout(() => {
                    window.location.href = redirectRoutes[jobRoleVal] || '/Employee/LoginPage';
                }, 3000);
            }
        });
    </script>
</body>
</html>
