@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor

@model ThothSystemVersion1.DataTransfereObject.purchaseOrderDTO
@{
    Layout = null;
    ViewBag.Title = "طلب شراء";
    var vendors = ViewBag.vendorList as List<Vendor>;
    var papers = ViewBag.PaperList;
    var inks = ViewBag.InkList;
    var supplies = ViewBag.SupplyList;
}

@{

    int jobRole = HttpContextAccessor.HttpContext.Session.GetInt32("JobRole") ?? 0;
    Console.WriteLine("JobRole: " + jobRole);
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Thoth</title>

    <!-- Bootstrap CSS RTL -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.rtl.min.css" rel="stylesheet">

    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">


    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
    <link href="~/css/Inventory/purchaseAll.css" rel="stylesheet" />
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="Home.css" />
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="icon" type="image/x-icon" href="/image/eye.jpg" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Alexandria:wght@100..900&display=swap" rel="stylesheet" />
    <link href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />

    <title>ThoTh</title>



</head>
<body>

    <div class="arrow">
        @{
            // admin
            if (jobRole == 0)
            {
                <a asp-controller="employee" asp-action="adminhome" class="back">
                    <i class='bx bx-left-arrow-circle' style="font-size: 40px; color: white;"></i>
                </a>

            } // inventory manager
            else if (jobRole == 1)
            {
                <a asp-controller="employee" asp-action="InventoryManager" class="back">
                    <i class='bx bx-left-arrow-circle' style="font-size: 40px; color: white;"></i>
                </a>
            }
            else if (jobRole == 2)
            {
                <a asp-controller="employee" asp-action="InventoryClerk" class="back">
                    <i class='bx bx-left-arrow-circle' style="font-size: 40px; color: white;"></i>
                </a>
            }


        }
    </div>


    <div class="form-container">

        <h1>إضافة طلب شراء</h1>



        @* Success and Error Messages *@
        @if (TempData["Success"] != null)
        {
            <div class="notification success">
                <div class="notification-content">
                    <i class='bx bx-check-circle'></i> @TempData["Success"]

                </div>
                <input type="hidden" id="tempDataSuccess" value="true" />
                <div class="progress-bar success"></div>
            </div>
        }

        @if (TempData["Error"] != null)
        {
            <div class="notification error">
                <div class="notification-content">
                    <i class='bx bx-error-circle'></i>
                    <span>@TempData["Error"]</span>
                </div>
                <input type="hidden" id="tempDataSuccess" value="false" />

                <div class="progress-bar error"></div>

            </div>
        }
        <input type="hidden" id="hdnJobRole" value="@jobRole" />


        @using (Html.BeginForm("purchaseall", "Inventory", FormMethod.Post))
        {
            <div class="rowCont">
                <div class="colCont">
                    @Html.LabelFor(m => m.VendorId, "التاجر", htmlAttributes: new { @class = "form-label fw-bold" })
                    @Html.DropDownList("VendorId",
                             new SelectList(vendors, "VendorId", "VendorName"),
                             "-- اختر التاجر --",
                             htmlAttributes: new { @class = "form-select" })
                </div>

                <div class="colCont">
                    @Html.LabelFor(m => m.PurchaseNotes, "ملاحظات عن الشراء", htmlAttributes: new { @class = "form-label fw-bold" })
                    @Html.TextAreaFor(m => m.PurchaseNotes, new { @class = "form-control", rows = "2", placeholder = "أدخل أي ملاحظات هنا..." })
                </div>
            </div>

            <div class="card mt-4 border-primary shadow-sm">

                <h5 class="mb-0">إضافة عنصر</h5>

                <div class="card-body">
                    <div class="rowCont">
                        <div class="colCont">
                            <label class="form-label ">نوع العنصر</label>
                            <select id="itemType" class="form-select">
                                <option value="">-- اختر نوع العنصر --</option>
                                <option value="Paper">ورق</option>
                                <option value="Ink">حبر</option>
                                <option value="Supply">مستلزمات</option>
                            </select>
                        </div>

                        <div class="colCont">
                            <label class="form-label ">العنصر</label>
                            <select id="itemId" class="form-select" disabled>
                                <option value="">-- اختر العنصر --</option>
                            </select>
                        </div>

                        <div class="colCont">
                            <label class="form-label ">الكمية</label>
                            <input type="number" id="itemQuantity" class="form-control" min="0" />
                        </div>

                        <div class="colCont">
                            <label class="form-label ">السعر</label>
                            <input type="number" id="itemPrice" class="form-control" min="0" step="0.01" />
                        </div>

                        <div class="colCont">
                            <button type="button" id="addItem" class="btn1">أضف العنصر</button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="tableContainer">
                <table>
                    <thead>
                        <tr>
                            <th>العنصر</th>
                            <th>الكمية</th>
                            <th>السعر</th>
                            <th>الإجراءات</th>
                        </tr>
                    </thead>
                    <tbody id="itemsTableBody">
                        <!-- Dynamic rows -->
                    </tbody>
                </table>
            </div>

            <div id="hiddenItemsContainer"></div>

            <div class="colCont1">
                <button type="submit" class="btn1">إرسال الطلب</button>
            </div>
        }

    </div>


    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <!-- Bootstrap JS Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        $(document).ready(function () {
            var items = [];
            var editIndex = -1;

            // Data sources loaded from the server
            const dataSources = {
                Paper: @Html.Raw(Json.Serialize(ViewBag.PaperList)),
                Ink: @Html.Raw(Json.Serialize(ViewBag.InkList)),
                Supply: @Html.Raw(Json.Serialize(ViewBag.SupplyList))
            };

            // When the item type is changed, populate the item dropdown accordingly
            $('#itemType').change(function () {
                var selectedType = $(this).val();
                var $itemSelect = $('#itemId');
                $itemSelect.empty().prop('disabled', !selectedType);
                $itemSelect.append('<option value="">-- اختر --</option>');
                if (!selectedType) return;

                // Loop through the matching list and add each option with the proper id.
                dataSources[selectedType]?.forEach(item => {
                    const id = item.paperId || item.inkId || item.suppliesId;
                    const name = item.name;
        $itemSelect.append(`<option value="${id}">${name}</option>`);                });
            });

            // Render the items table and hidden inputs for submission
            function renderItems() {
                var $tableBody = $('#itemsTableBody');
                var $hiddenContainer = $('#hiddenItemsContainer');
                $tableBody.empty();
                $hiddenContainer.empty();

                items.forEach((item, index) => {
                    // Display the item details in the table
                    $tableBody.append(`
                        <tr data-index="${index}">
                            <td>${item.itemName}</td>
                            <td>${item.quantity}</td>
                            <td>${item.price}</td>
                            <td>
                                <button type="button" class="btn  editItem">تعديل</button>
                                <button type="button" class="btn  deleteItem">حذف</button>
                            </td>
                        </tr>
                    `);

                    // Create hidden inputs for the type-specific id, quantity, and price.
                    let hiddenInputs = "";
                    if (item.itemType === "Paper") {
                       hiddenInputs += `<input type="hidden" name="BridgeList[${index}].PaperId" value="${item.itemId}" />`;
                       } else if (item.itemType === "Ink") {
                        hiddenInputs += `<input type="hidden" name="BridgeList[${index}].InkId" value="${item.itemId}" />`;
                    } else if (item.itemType === "Supply") {
                        hiddenInputs += `<input type="hidden" name="BridgeList[${index}].SuppliesId" value="${item.itemId}" /> `;
                    }
                    hiddenInputs += `<input type="hidden" name="BridgeList[${index}].Quantity" value="${item.quantity}" /> `;
                    hiddenInputs +=` <input type="hidden" name="BridgeList[${index}].Price" value="${item.price}" /> `;

                    $hiddenContainer.append(hiddenInputs);
                });
            }

            // Add or update an item in the list
            $('#addItem').click(function () {
                var itemType = $('#itemType').val();
                var itemId = $('#itemId').val();
                var itemName = $('#itemId option:selected').text();
                var quantity = parseInt($('#itemQuantity').val());
                var price = parseFloat($('#itemPrice').val());

                if (!itemType || !itemId || isNaN(quantity) || quantity < 0 || isNaN(price) || price < 0) {
                    alert("يرجى تعبئة جميع الحقول بشكل صحيح");
                    return;
                }

                var newItem = { itemType, itemId, itemName, quantity, price };

                if (editIndex === -1) {
                    items.push(newItem);
                } else {
                    items[editIndex] = newItem;
                    editIndex = -1;
                    $('#addItem').text('أضف العنصر');
                }

                // Reset form fields after adding/updating
                $('#itemType').val('');
                $('#itemId').empty().append('<option value="">-- اختر العنصر --</option>').prop('disabled', true);
                $('#itemQuantity').val('');
                $('#itemPrice').val('');
                renderItems();
            });

            // Edit an existing item
            $('#itemsTableBody').on('click', '.editItem', function () {
                editIndex = $(this).closest('tr').data('index');
                var item = items[editIndex];
                $('#itemType').val(item.itemType).trigger('change');
                // Wait a moment for the dropdown to be populated before setting its value.
                setTimeout(() => {
                    $('#itemId').val(item.itemId);
                }, 100);
                $('#itemQuantity').val(item.quantity);
                $('#itemPrice').val(item.price);
                $('#addItem').text('تحديث العنصر');
            });

            // Delete an item from the list
            $('#itemsTableBody').on('click', '.deleteItem', function () {
                var index = $(this).closest('tr').data('index');
                items.splice(index, 1);
                renderItems();
            });

            // Prevent form submission if no items have been added
            $('form').submit(function (e) {
                if ($('#itemsTableBody tr').length === 0) {
                    alert("يجب إضافة عنصر واحد على الأقل قبل إرسال الطلب.");
                    e.preventDefault();
                }
            });

            // Auto-redirect if TempData["Success"] is set (optional)
               const tempDataElement = document.getElementById('tempDataSuccess');
            const jobRoleElement = document.getElementById('hdnJobRole');

            // Get values with proper fallbacks
            const hasSuccessMessage = tempDataElement ? tempDataElement.value === 'true' : false;
            const jobRole = jobRoleElement ? parseInt(jobRoleElement.value) : 0;

            console.log("Success message exists:", hasSuccessMessage);
            console.log("Job role:", jobRole);

            // Mapping of job roles to their respective URLs
            const jobRoleRoutes = {
                0: "/employee/AdminHome",
                1: "/employee/inventoryManager",
                2: "/employee/inventoryClerk",
                3: "/employee/TechnicalManager",
                4: "/employee/technicalClerk",
                5: "/employee/CostManager",
                6: "/employee/costClerk"
            };

            if (hasSuccessMessage) {
                setTimeout(function () {
                    const redirectUrl = jobRoleRoutes[jobRole] || "/Employee/LoginPage";
                    window.location.href = redirectUrl;
                }, 3000);
            }
        });
    </script>
</body>
</html>