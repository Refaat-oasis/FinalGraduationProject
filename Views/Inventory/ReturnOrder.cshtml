﻿@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor


@{

    int jobRole = HttpContextAccessor.HttpContext.Session.GetInt32("JobRole") ?? 0;
    Console.WriteLine("JobRole: " + jobRole);
}

@model ThothSystemVersion1.DataTransfereObject.ReturnOrderDTO

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewBag.Title</title>

    <!-- Bootstrap CSS RTL -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.rtl.min.css" rel="stylesheet">

    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">


    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
    <link href="~/css/Inventory/ReturnOrder.css" rel="stylesheet" />


    <link rel="stylesheet" href="Home.css" />
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="icon" type="image/x-icon" href="/image/eye.jpg" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Alexandria:wght@100..900&display=swap" rel="stylesheet" />
    <link href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />

    <title>ThoTh</title>

</head>

<div class="container">
    <div class="arrow">
        @{
            // admin
            if (jobRole == 0)
            {
                <a asp-controller="employee" asp-action="adminhome" class="back">
                    <i class='bx bx-left-arrow-circle' style="font-size: 40px; color: white;"></i>
                </a>

            } // inventory manager
            else if (jobRole == 1)
            {
                <a asp-controller="employee" asp-action="inventoryManager" class="back">
                    <i class='bx bx-left-arrow-circle' style="font-size: 40px; color: white;"></i>
                </a>
            }
            else if (jobRole == 2)
            {
                <a asp-controller="employee" asp-action="inventoryClerk" class="back">
                    <i class='bx bx-left-arrow-circle' style="font-size: 40px; color: white;"></i>
                </a>
            }


        }
    </div>
</div>

@* Success and Error Messages *@
@if (TempData["Success"] != null)
{
    <div class="notification success">
        <div class="notification-content">
            <i class='bx bx-check-circle'></i> @TempData["Success"]

        </div>
        <input type="hidden" id="tempDataSuccess" value="true" />
        <div class="progress-bar success"></div>
    </div>
}

@if (TempData["Error"] != null)
{
    <div class="notification error">
        <div class="notification-content">
            <i class='bx bx-error-circle'></i>
            <span>@TempData["Error"]</span>
        </div>
        <input type="hidden" id="tempDataSuccess" value="false" />

        <div class="progress-bar error"></div>

    </div>
}
<input type="hidden" id="hdnJobRole" value="@jobRole" />


<form asp-action="ReturnOrder" asp-controller="Inventory" id="returnOrderForm" class="form-container" method="post">

    <div class="row mb-3">
        <div class="col-md-6">
            <label class="form-label fw-bold">نوع الإرجاع</label>
            <select id="returnType" class="form-select" >
                <option value="">-- اختر نوع الإرجاع --</option>
                <option value="job">إرجاع من أمر تشغيل (إضافة للمخزون)</option>
                <option value="purchase">إرجاع إلى المورد (خصم من المخزون)</option>
            </select>
        </div>
        <div class="col-md-6">
            <div class="form-check mt-4">
                <input class="form-check-input" type="checkbox" asp-for="ReturnInOut" id="returnInOut">
                <label class="form-check-label" for="returnInOut">
                    إضافة للمخزون
                </label>
            </div>
        </div>
    </div>

    <div class="row mb-3" id="jobOrderSection" style="display:none;">
        <div class="col-md-6">
            <label asp-for="JobOrderId" class="form-label fw-bold">اختر أمر التشغيل</label>
            <select asp-for="JobOrderId" id="jobOrderSelect" class="form-select">
                <option value="">-- اختر أمر التشغيل --</option>
                @if (ViewBag.JobOrderList != null)
                {
                    foreach (var job in ViewBag.JobOrderList)
                    {
                        <option value="@job.JobOrderId">@job.JobOrderId - @(job.Customer?.CustomerName ?? "بدون عميل")</option>
                    }
                }
            </select>
            <span asp-validation-for="JobOrderId" class="text-danger"></span>
        </div>
    </div>

    <div class="row mb-3" id="purchaseOrderSection" style="display:none;">
        <div class="col-md-6">
            <label asp-for="purchaseID" class="form-label fw-bold">اختر أمر الشراء</label>
            <select asp-for="purchaseID" id="purchaseOrderSelect" class="form-select">
                <option value="">-- اختر أمر الشراء --</option>
                @if (ViewBag.PurchaseOrderList != null)
                {
                    foreach (var purchase in ViewBag.PurchaseOrderList)
                    {
                        <option value="@purchase.PurchaseId">@purchase.PurchaseId - @(purchase.Vendor?.VendorName ?? "بدون مورد")</option>
                    }
                }
            </select>
            <span asp-validation-for="purchaseID" class="text-danger"></span>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-12">
            <label asp-for="ReturnsNotes" class="form-label fw-bold">ملاحظات الإرجاع</label>
            <textarea asp-for="ReturnsNotes" class="form-control" rows="2"></textarea>
        </div>
    </div>

    <!-- Manual item addition section -->
    <div class="card mt-4 border-primary shadow-sm" id="manualAdditionSection" style="display:none;">
        <div class="card-header bg-light">
            <h5 class="mb-0">إضافة الأصناف المرتجعة يدوياً</h5>
        </div>
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-4">
                    <label class="form-label fw-bold">نوع الصنف</label>
                    <select id="itemType" class="form-select">
                        <option value="">-- اختر النوع --</option>
                        <option value="Paper">ورق</option>
                        <option value="Ink">حبر</option>
                        <option value="Supply">مستلزمات</option>
                    </select>
                </div>

                <div class="col-md-4">
                    <label class="form-label fw-bold">الصنف</label>
                    <select id="itemId" class="form-select" disabled>
                        <option value="">-- اختر الصنف --</option>
                    </select>
                </div>

                <div class="col-md-3">
                    <label class="form-label fw-bold">كمية الإرجاع</label>
                    <input type="number" id="itemQuantity" class="form-control" min="1" />
                    <small id="originalQuantityInfo" class="text-muted" style="display:none;">
                        الكمية الأصلية: <span id="originalQuantityValue">0</span>
                    </small>
                </div>

                <div class="col-md-1 d-grid">
                    <button type="button" id="addItem" class="btn btn-primary mt-4">إضافة</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Selected items for return -->
    <div class="card mt-4 border-info shadow-sm">
        <div class="card-header bg-info text-white">
            <h5 class="mb-0">الأصناف المحددة للإرجاع</h5>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered table-hover text-center">
                    <thead class="table-info">
                        <tr>
                            <th>نوع الصنف</th>
                            <th>الصنف</th>
                            <th>الكمية الأصلية</th>
                            <th>كمية الإرجاع</th>
                            <th>الإجراءات</th>
                        </tr>
                    </thead>
                    <tbody id="itemsTableBody"></tbody>
                </table>
            </div>
            <div id="noSelectedItemsMessage" class="alert alert-warning" style="display:none;">
                لم يتم تحديد أي أصناف للإرجاع بعد
            </div>
        </div>
    </div>

    <div id="hiddenItemsContainer"></div>

    <div class="d-grid mt-3">
        <button type="submit" id="submitBtn" class="btn btn-success btn-lg">حفظ أمر الإرجاع</button>
    </div>
</form>
@section Scripts {
    <script>
        $(document).ready(function () {
            console.log("Document is ready1");
            // Toggle between job order and purchase order sections
            $('#returnType').change(function () {
                const selectedType = $(this).val();
                $('#jobOrderSection, #purchaseOrderSection, #manualAdditionSection').hide();
                $('#jobOrderSelect, #purchaseOrderSelect').val('');
                items = [];
                renderItems();

                if (selectedType === 'job') {
                    $('#jobOrderSection').show();
                    $('#returnInOut').prop('checked', true);
                } else if (selectedType === 'purchase') {
                    $('#purchaseOrderSection').show();
                    $('#returnInOut').prop('checked', false);
                }
            });

            let items = [];
            let editIndex = -1;
            let orderItems = [];

            // Load items for a job order
            $('#jobOrderSelect').change(function () {
                const jobOrderId = $(this).val();
                if (!jobOrderId) {
                    $('#manualAdditionSection').hide();
                    orderItems = [];
                    return;
                }
                $.get('/Inventory/GetJobOrderItems', { jobOrderId }, function (data) {
                    orderItems = data;
                    $('#manualAdditionSection').show();
                    populateItemTypes();
                }).fail(xhr => alert('حدث خطأ اثناء تحميل بيانات الطلبية : ' + xhr.responseText));
            });

            // Load items for a purchase order
            $('#purchaseOrderSelect').change(function () {
                const purchaseId = $(this).val();
                if (!purchaseId) {
                    $('#manualAdditionSection').hide();
                    orderItems = [];
                    return;
                }
                $.get('/Inventory/GetPurchaseOrderItems', { purchaseId }, function (data) {
                    orderItems = data;
                    $('#manualAdditionSection').show();
                    populateItemTypes();
                }).fail(xhr => alert('حدث خطأ اثناء تحميل بيانات امر الشراء: ' + xhr.responseText));
            });

            function populateItemTypes() {
                const $itemType = $('#itemType');
                $itemType.empty().append('<option value="">-- اختر النوع --</option>');
                const unique = [...new Set(orderItems.map(i => i.itemType))];
                unique.forEach(type => {
                    $itemType.append(`<option value="${type}">${type}</option>`);
                });
            }

            // When a type is chosen, fill the item dropdown
            $('#itemType').change(function () {
                const selectedType = $(this).val();
                const $itemSelect = $('#itemId');
                $itemSelect.empty().prop('disabled', !selectedType)
                           .append('<option value="">-- اختر الصنف --</option>');
                if (!selectedType) return;

                orderItems
                    .filter(i => i.itemType === selectedType)
                    .forEach(item => {
                        const id = item.itemId || item.paperId || item.inkId || item.suppliesId;
                        const name = item.name;
                        const qty  = item.quantity || 0;
                        $itemSelect.append(
                            `<option value="${id}" data-quantity="${qty}">${name} (ID: ${id}) - الكمية: ${qty}</option>`
                        );
                    });
            });

            // Show original quantity when an item is selected
            $('#itemId').change(function () {
                const qty = parseInt($(this).find(':selected').data('quantity')) || 0;
                $('#originalQuantityValue').text(qty);
                $('#originalQuantityInfo').show();
                $('#itemQuantity').attr('max', qty).val('');
            });

            // Add or edit an item in the list
            $('#addItem').click(function () {
                const type = $('#itemType').val();
                const id   = $('#itemId').val();
                const name = $('#itemId option:selected').text().split(' (ID:')[0].trim();
                const orig = parseInt($('#originalQuantityValue').text());
                const qty  = parseInt($('#itemQuantity').val());

                if (!type || !id || !qty || qty <= 0) {
                    return alert('الرجاء ملئ جميع البيانات بشكل صحيح');
                }
                if (qty > orig) {
                    return alert(`كمية المرتجع (${qty}) اكبر من كمية الاصلية (${orig})`);
                }

                const newItem = { itemType: type, itemId: id, itemName: name, originalQuantity: orig, quantity: qty };

                if (editIndex === -1) {
                    const idx = items.findIndex(i => i.itemType === type && i.itemId == id);
                    if (idx !== -1) items[idx].quantity += qty;
                    else items.push(newItem);
                } else {
                    items[editIndex] = newItem;
                    editIndex = -1;
                }
                console.log(newItem);
                console.log(items);

                renderItems();
                resetItemForm();
            });

            function renderItems() {
                const $tb = $('#itemsTableBody'), $hc = $('#hiddenItemsContainer');
                $tb.empty(); $hc.empty();
                items.forEach((it, i) => {
                    $tb.append(`
                        <tr data-index="${i}">
                            <td>${it.itemType}</td>
                            <td>${it.itemName}</td>
                            <td>${it.originalQuantity}</td>
                            <td>${it.quantity}</td>
                            <td>
                                <button type="button" class="btn btn-warning btn-sm editItem">تعديل</button>
                                <button type="button" class="btn btn-danger btn-sm deleteItem">حذف</button>
                            </td>
                        </tr>
                    `);
                    let inputs = '';
                    if (it.itemType === 'Paper' || it.itemType === 'الورق')
                        inputs += `<input type="hidden" name="BridgeList[${i}].PaperId" value="${it.itemId}" />`;
                    else if (it.itemType === 'Ink' || it.itemType === 'الحبر')
                        inputs += `<input type="hidden" name="BridgeList[${i}].InkId" value="${it.itemId}" />`;
                    else if (it.itemType === 'Supply' || it.itemType === 'المتلزمات')
                        inputs += `<input type="hidden" name="BridgeList[${i}].SuppliesId" value="${it.itemId}" />`;
                    inputs += `<input type="hidden" name="BridgeList[${i}].Quantity" value="${it.quantity}" />`;
                    $hc.append(inputs);
                    console.log(inputs)
                });
                $('#noSelectedItemsMessage').toggle(items.length === 0);
            }

            function resetItemForm() {
                $('#itemType').val('');
                $('#itemId').empty().prop('disabled', true);
                $('#itemQuantity').val('');
                $('#originalQuantityInfo').hide();
                $('#addItem').text('إضافة');
                editIndex = -1;
            }

            // Edit & Delete handlers
            $('#itemsTableBody')
                .on('click', '.deleteItem', function (e) {
                    e.preventDefault();
                    items.splice($(this).closest('tr').data('index'), 1);
                    renderItems();
                })
                .on('click', '.editItem', function (e) {
                    e.preventDefault();
                    editIndex = $(this).closest('tr').data('index');
                    var item = items[editIndex];

                    $('#itemType').val(item.itemType).trigger('change');

                    const checkItemExists = setInterval(() => {
                        const $itemId = $('#itemId');
                        if ($itemId.find('option').length > 1) {
                            clearInterval(checkItemExists);
                            $itemId.val(item.itemId);
                            $('#itemQuantity').val(item.quantity);
                            $('#originalQuantityValue').text(item.originalQuantity);
                            $('#originalQuantityInfo').show();
                            $('#addItem').text('تحديث العنصر');

                            $('html, body').animate({
                                scrollTop: $('#manualAdditionSection').offset().top
                            }, 500);
                        }
                    }, 100);
                });

            // Form validation
            $('#returnOrderForm').submit(function (e) {
                if (!items.length) {
                    e.preventDefault(); alert('من فضلك اضف عنصر واحد علي الاقل');
                    return false;
                }
                const t = $('#returnType').val();
                if (t === 'job' && !$('#jobOrderSelect').val()) {
                    e.preventDefault(); alert('اختر طلبية'); return false;
                }
                if (t === 'purchase' && !$('#purchaseOrderSelect').val()) {
                    e.preventDefault(); alert('اختر امر الشراء '); return false;
                }
                return true;
            });
        });

        console.log("Document is ready");
        const tempDataElement = document.getElementById('tempDataSuccess');
        const jobRoleElement = document.getElementById('hdnJobRole');

        // Get values with proper fallbacks
        const hasSuccessMessage = tempDataElement ? tempDataElement.value === 'true' : false;
        const jobRole = jobRoleElement ? parseInt(jobRoleElement.value) : 0;

        console.log("Success message exists:", hasSuccessMessage);
        console.log("Job role:", jobRole);

        // Mapping of job roles to their respective URLs
        const jobRoleRoutes = {
            0: "/employee/AdminHome",
            1: "/employee/inventoryManager",
            2: "/employee/inventoryClerk",
            3: "/employee/TechnicalManager",
            4: "/employee/technicalClerk",
            5: "/employee/CostManager",
            6: "/employee/costClerk"
        };

        if (hasSuccessMessage) {
            setTimeout(function () {
                const redirectUrl = jobRoleRoutes[jobRole] || "/Employee/LoginPage";
                window.location.href = redirectUrl;
            }, 3000);
        }
    </script>
}