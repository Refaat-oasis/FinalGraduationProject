@model ThothSystemVersion1.DataTransfereObject.RequisiteOrderDTO
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@{

    int jobRole = HttpContextAccessor.HttpContext.Session.GetInt32("JobRole") ?? 0;
    Console.WriteLine("JobRole: " + jobRole);
}

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="LogIn.css" />
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="icon" type="image/jpeg" href="~/image/eye.jpg" asp-append-version="true" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Alexandria:wght@100..900&display=swap" rel="stylesheet" />
    <link href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css" rel="stylesheet" />
    <title>ThoTh</title>
    <link href="~/css/Technical/CreateRequisite.css" rel="stylesheet" />

</head>





<div class="container py-3" style="min-height: 100vh; display: flex; flex-direction: column; justify-content: flex-start;">
    <div class="arrow mb-3">
        @{
            // admin
            if (jobRole == 0)
            {
                <a asp-controller="employee" asp-action="adminhome" class="back">
                    <i class='bx bx-left-arrow-circle' style="font-size: 40px; color: white;"></i>
                </a>

            } // Technical manager
            else if (jobRole == 3)
            {
                <a asp-controller="employee" asp-action="TechnicalManager" class="back">
                    <i class='bx bx-left-arrow-circle' style="font-size: 40px; color: white;"></i>
                </a>
            }

            //  Technical Clerk
            else if (jobRole == 4)
            {
                <a asp-controller="employee" asp-action="technicalClerk" class="back">
                    <i class='bx bx-left-arrow-circle' style="font-size: 40px; color: white;"></i>
                </a>
            }

        }
    </div>


    <div class="card shadow" style="max-width: 600px; margin: 0 auto; border: none;">
        <div class="card-header text-center py-3" style="background-color: #f8f9fa; border-bottom: 1px solid #dee2e6;">
            <h1 class="mb-0">إنشاء أمر صرف جديد</h1>
        </div>

  

        <div class="card-body px-4 py-3">
        <form asp-action="CreateRequisite" asp-controller="Technical" id="requisiteForm" method="post">

                @* Success and Error Messages *@
            @if (TempData["Success"] != null)
            {
                <div class="notification success">
                    <div class="notification-content">
                        <i class='bx bx-check-circle'></i> @TempData["Success"]

                    </div>
                    <input type="hidden" id="tempDataSuccess" value="true" />
                    <div class="progress-bar success"></div>
                </div>
            }

            @if (TempData["Error"] != null)
            {
                <div class="notification error">
                    <div class="notification-content">
                        <i class='bx bx-error-circle'></i>
                        <span>@TempData["Error"]</span>
                    </div>
                    <input type="hidden" id="tempDataSuccess" value="false" />

                    <div class="progress-bar error"></div>

                </div>
            }
            <input type="hidden" id="hdnJobRole" value="@jobRole" />
            <div asp-validation-summary="ModelOnly" class="error"></div>

            <!-- قسم اختيار الطلبية -->
            <div class="mb-4">
                <label asp-for="JobOrderId" class="textlabel fw-bold">اختر الطلبيّة</label>
                <select asp-for="JobOrderId" class="form-select" required>
                    <option value="">اختر الطلبيّة</option>
                    @foreach (var job in ViewBag.JobOrderList)
                    {
                        <option value="@job.JobOrderId">
                            @job.JobOrderId - @(job.Customer?.CustomerName ?? "بدون عميل")
                        </option>
                    }
                </select>
                <span asp-validation-for="JobOrderId" class="text-danger small"></span>
            </div>

            <!-- قسم الملاحظات -->
            <div class="mb-4">
                <label asp-for="RequisiteNotes" class="textlabel fw-bold">إضافة ملاحظات</label>
                <textarea asp-for="RequisiteNotes" class="form-control" rows="3"></textarea>
            </div>

            <!-- قسم إضافة الأصناف -->
            <div class="mb-4">
                <h2 class="fw-bold mb-3">إضافة صنف</h2>

                <div class="row g-3">
                    <div class="col-md-6">
                        <label class="textlabel">نوع الصنف</label>
                        <select id="itemType" class="form-select">
                            <option value="">اختر النوع</option>
                            <option value="Paper">ورق</option>
                            <option value="Ink">حبر</option>
                            <option value="Supply">مستلزمات</option>
                        </select>
                    </div>

                    <div class="col-md-6">
                        <label class="textlabel">الصنف</label>
                        <select id="itemId" class="form-select" disabled>
                            <option value="">اختر الصنف</option>
                        </select>
                    </div>

                    <div class="col-md-6">
                        <label class="textlabel">الكمية الحالية</label>
                        <input type="number" id="currentQuantity" class="form-control" readonly />
                    </div>

                    <div class="col-md-6">
                        <label class="textlabel">الكمية المطلوبة</label>
                        <input type="number" id="itemQuantity" class="form-control" min="1" />
                        <div id="quantityError" class="text-danger small" style="display:none;">
                            الكمية المطلوبة يجب أن تكون أقل من الكمية الحالية
                        </div>
                    </div>
                </div>

                <div class="text-end mt-3">
                    <button type="button" id="addItemBtn" class="btn btn-primary px-4">إضافة</button>
                </div>
            </div>

            <!-- جدول الأصناف المضافة -->
            <div class="mb-4">
                <div class="table-responsive">
                    <table class="table table-bordered">
                        <thead style="background-color: transparent;">
                            <tr>
                                <th>نوع الصنف</th>
                                <th>اسم الصنف</th>
                                <th>الكمية الحالية</th>
                                <th>الكمية المطلوبة</th>
                                <th>الإجراءات</th>
                            </tr>
                        </thead>
                        <tbody id="itemsTableBody">
                            <!-- سيتم إضافة الصفوف هنا ديناميكيًا -->

                        </tbody>
                    </table>
                </div>
            </div>

            <div id="hiddenItemsContainer"></div>

            <!-- زر الحفظ -->
            <div class="text-center mt-4">
                <button type="submit" class="btn btn-primary px-4 py-2 me-2">حفظ الطلب</button>
                @* <button type="reset" class="btn btn-primary px-4 py-2">إعادة إدخال</button> *@
            </div>
        </form>
    </div>
</div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Initialize variables
            var items = [];
            var editIndex = -1;

            // Data sources from ViewBag
            const dataSources = {
                Paper: @Html.Raw(Json.Serialize(ViewBag.PaperList)),
                Ink: @Html.Raw(Json.Serialize(ViewBag.InkList)),
                Supply: @Html.Raw(Json.Serialize(ViewBag.SupplyList))
            };

            // When item type changes
            $('#itemType').change(function () {
                var selectedType = $(this).val();
                var $itemSelect = $('#itemId');

                // Reset fields
                $itemSelect.empty().prop('disabled', !selectedType);
                $('#currentQuantity').val('');
                $('#itemQuantity').val('');
                $('#quantityError').hide();

                if (!selectedType) {
                    $itemSelect.append('<option value="">-- اختر الصنف --</option>');
                    return;
                }

                // Populate items based on selected type
                $itemSelect.append('<option value="">-- اختر الصنف --</option>');

                if (dataSources[selectedType] && dataSources[selectedType].length > 0) {
                    $.each(dataSources[selectedType], function(index, item) {
                        var id = item.paperId || item.inkId || item.suppliesId;
                        var name = item.name;
                        var quantity = item.quantity || 0;

                        $itemSelect.append($('<option>', {
                            value: id,
                            text: name,
                            'data-quantity': quantity
                        }));
                    });
                }
            });

            // When item selection changes
            $('#itemId').change(function () {
                var selectedOption = $(this).find('option:selected');
                var currentQty = selectedOption.data('quantity') || 0;
                $('#currentQuantity').val(currentQty);
                $('#itemQuantity').attr('max', currentQty);
            });

            // Quantity validation
            $('#itemQuantity').on('input', function() {
                var requiredQty = parseInt($(this).val()) || 0;
                var currentQty = parseInt($('#currentQuantity').val()) || 0;

                if (requiredQty > currentQty) {
                    $('#quantityError').show();
                    $(this).addClass('is-invalid');
                } else {
                    $('#quantityError').hide();
                    $(this).removeClass('is-invalid');
                }
            });

            // Add item button
            $('#addItemBtn').click(function () {
                var itemType = $('#itemType').val();
                var itemId = $('#itemId').val();
                var itemName = $('#itemId option:selected').text();
                var quantity = parseInt($('#itemQuantity').val()) || 0;
                var currentQuantity = parseInt($('#currentQuantity').val()) || 0;

                // Validation
                if (!itemType || !itemId) {
                    alert('يجب اختيار نوع الصنف والصنف أولاً');
                    return;
                }

                if (quantity <= 0) {
                    alert('يجب إدخال كمية صحيحة أكبر من الصفر');
                    return;
                }

                if (quantity > currentQuantity) {
                    alert('الكمية المطلوبة أكبر من الكمية المتاحة');
                    return;
                }

                // Check if item already exists
                // var existingItemIndex = items.findIndex(item => item.itemId == itemId);
                // if (existingItemIndex >= 0 && editIndex === -1) {
                //     alert('هذا الصنف مضاف بالفعل');
                //     return;
                // }

                // Create new item
                var newItem = {
                    itemType: itemType,
                    itemId: itemId,
                    itemName: itemName,
                    quantity: quantity,
                    currentQuantity: currentQuantity
                };

                // Add or update item
                if (editIndex === -1) {
                    items.push(newItem);
                } else {
                    items[editIndex] = newItem;
                    editIndex = -1;
                    $('#addItemBtn').text('إضافة');
                }

                // Update UI
                renderItemsTable();
                resetItemForm();
            });

            // Render items table
            function renderItemsTable() {
                var $tableBody = $('#itemsTableBody');
                var $hiddenContainer = $('#hiddenItemsContainer');

                $tableBody.empty();
                $hiddenContainer.empty();

                if (items.length === 0) {
                    $tableBody.append('<tr><td colspan="5" class="text-center">لا توجد أصناف مضافة</td></tr>');
                    return;
                }

                items.forEach((item, index) => {
                    // Add row to table
                    $tableBody.append(`
                        <tr data-index="${index}">
                            <td>${getArabicType(item.itemType)}</td>
                            <td>${item.itemName}</td>
                            <td>${item.currentQuantity}</td>
                            <td>${item.quantity}</td>
                            <td>
                                <div class="btn-container">
                                    <button type="button" class="btn btn-secondary btn-sm editItem">
                                        <i class="bx bx-edit"></i> تعديل
                                    </button>
                                    <button type="button" class="btn btn-secondary btn-sm deleteItem">
                                        <i class="bx bx-trash"></i> حذف
                                    </button>
                                </div>
                            </td>
                        </tr>
                    `);

                    // Add hidden fields for form submission
                    addHiddenFields(item, index);
                });
            }

            // Reset item form
            function resetItemForm() {
                $('#itemType').val('').trigger('change');
                $('#itemId').empty().append('<option value="">-- اختر الصنف --</option>').prop('disabled', true);
                $('#currentQuantity').val('');
                $('#itemQuantity').val('');
                $('#quantityError').hide();
            }

            // Edit item
            $('#itemsTableBody').on('click', '.editItem', function() {
                editIndex = $(this).closest('tr').data('index');
                var item = items[editIndex];

                $('#itemType').val(item.itemType).trigger('change');

                // Small delay to ensure the itemId select is populated
                setTimeout(() => {
                    $('#itemId').val(item.itemId);
                    $('#currentQuantity').val(item.currentQuantity);
                    $('#itemQuantity').val(item.quantity);
                    $('#addItemBtn').text('تحديث');
                }, 100);
            });

            // Delete item
            $('#itemsTableBody').on('click', '.deleteItem', function() {
                if (confirm('هل أنت متأكد من حذف هذا الصنف؟')) {
                    var index = $(this).closest('tr').data('index');
                    items.splice(index, 1);
                    renderItemsTable();

                    // Reset form if editing the deleted item
                    if (editIndex === index) {
                        resetItemForm();
                        editIndex = -1;
                        $('#addItemBtn').text('إضافة');
                    } else if (editIndex > index) {
                        editIndex--;
                    }
                }
            });

            // Helper function to get Arabic type
            function getArabicType(type) {
                const types = {
                    'Paper': 'ورق',
                    'Ink': 'حبر',
                    'Supply': 'مستلزمات'
                };
                return types[type] || type;
            }

            // Add hidden fields for form submission
            function addHiddenFields(item, index) {
                var $hiddenContainer = $('#hiddenItemsContainer');
                var prefix = `BridgeList[${index}]`;

                var hiddenFields = `
                    <input type="hidden" name="${prefix}.Type" value="${item.itemType}" />
                    <input type="hidden" name="${prefix}.Quantity" value="${item.quantity}" />
                `;

                // Add the correct ID field based on item type
                if (item.itemType === 'Paper') {
                    hiddenFields += `<input type="hidden" name="${prefix}.PaperId" value="${item.itemId}" />`;
                }
                else if (item.itemType === 'Ink') {
                    hiddenFields += `<input type="hidden" name="${prefix}.InkId" value="${item.itemId}" />`;
                }
                else if (item.itemType === 'Supply') {
                    hiddenFields += `<input type="hidden" name="${prefix}.SuppliesId" value="${item.itemId}" />`;
                }

                $hiddenContainer.append(hiddenFields);
            }

            // Form submission
            $('#requisiteForm').submit(function(e) {
                if (items.length === 0) {
                    if (!confirm('لم تقم بإضافة أي أصناف. هل تريد المتابعة؟')) {
                        e.preventDefault();
                    }
                }
            });

            // Handle notification and redirect
            const tempDataElement = document.getElementById('tempDataSuccess');
            const jobRoleElement = document.getElementById('hdnJobRole');

            if (tempDataElement && tempDataElement.value === 'true') {
                const jobRole = jobRoleElement ? parseInt(jobRoleElement.value) : 0;

                const jobRoleRoutes = {
                    0: "/employee/AdminHome",
                    1: "/employee/inventoryManager",
                    2: "/employee/inventoryClerk",
                    3: "/employee/TechnicalManager",
                    4: "/employee/technicalClerk",
                    5: "/employee/CostManager",
                    6: "/employee/costClerk"
                };

                setTimeout(function() {
                    const redirectUrl = jobRoleRoutes[jobRole] || "/Employee/LoginPage";
                    window.location.href = redirectUrl;
                }, 3000);
            }
        });
    </script>
}