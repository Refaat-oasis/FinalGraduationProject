@model ThothSystemVersion1.DataTransfereObject.ReturnOrderDTO

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewBag.Title</title>

    <!-- Bootstrap CSS RTL -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.rtl.min.css" rel="stylesheet">

    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">


    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
    <link href="~/css/InventoryClerk/ReturnOrder.css" rel="stylesheet" />

</head>

<body>

    <div class="arrow mb-3">
        <a asp-controller="Inventory" asp-action="InventoryManagerHome" class="back">
            <i class='bx bx-left-arrow-circle' style="font-size: 40px; color: white;"></i>
        </a>
    </div>
    <div class="form-container">

        <h1>مرتجعات</h1>


        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success">
                <i class="bx bx-check-circle"></i> @TempData["SuccessMessage"]
            </div>
        }
        @if (TempData["ErrorMessage"] != null)
        {
            <div class="alert alert-danger">
                <i class="bx bx-error-circle"></i> @TempData["ErrorMessage"]
            </div>
        }

        <form asp-action="ReturnOrder" asp-controller="Inventory" id="returnOrderForm" class="form-container" method="post">

            <div class="rowCont">

                <div class="colCont">
                    <div class="form-check mt-4">
                        <input class="form-check-input" type="checkbox" asp-for="ReturnInOut" id="returnInOut">
                        <label class="form-check-label" for="returnInOut">
                            إضافة للمخزون
                        </label>
                    </div>
                </div>

                <div class="colCont">
                    <label class="form-label">مصدر الامر</label>
                    <select id="returnType" class="form-select" required>
                        <option value="">-- اختر مصدر الامر --</option>
                        <option value="job"> امر تصنيع</option>
                        <option value="purchase"> امر شراء</option>
                    </select>
                </div>

            </div>

            <div class="rowCont" id="jobOrderSection" style="display:none;">
                <div class="colCont">
                    <label asp-for="JobOrderId" class="form-label">اختر أمر التشغيل</label>
                    <select asp-for="JobOrderId" id="jobOrderSelect" class="form-select">
                        <option value="">-- اختر أمر التشغيل --</option>
                        @if (ViewBag.JobOrderList != null)
                        {
                            foreach (var job in ViewBag.JobOrderList)
                            {
                                <option value="@job.JobOrderId">@job.JobOrderId - @(job.Customer?.CustomerName ?? "بدون عميل")</option>
                            }
                        }
                    </select>
                    <span asp-validation-for="JobOrderId" class="text-danger"></span>
                </div>
            </div>

            <div class="rowCont" id="purchaseOrderSection" style="display:none;">
                <div class="colCont">
                    <label asp-for="purchaseID" class="form-label">اختر أمر الشراء</label>
                    <select asp-for="purchaseID" id="purchaseOrderSelect" class="form-select">
                        <option value="">-- اختر أمر الشراء --</option>
                        @if (ViewBag.PurchaseOrderList != null)
                        {
                            foreach (var purchase in ViewBag.PurchaseOrderList)
                            {
                                <option value="@purchase.PurchaseId">@purchase.PurchaseId - @(purchase.Vendor?.VendorName ?? "بدون مورد")</option>
                            }
                        }
                    </select>
                    <span asp-validation-for="purchaseID" class="text-danger"></span>
                </div>
            </div>

            <div class="rowCont">
                <div class="colCont">
                    <label asp-for="ReturnsNotes" class="form-label">ملاحظات </label>
                    <textarea asp-for="ReturnsNotes" class="form-control" rows="2"></textarea>
                </div>
            </div>

            <!-- Manual item addition section -->
            <div class="card mt-4 border-primary shadow-sm" id="manualAdditionSection" style="display:none;">

                <h5 class="mb-0">اضف عنصر للمرتجع</h5>

                <div class="card-body">
                    <div class="rowCont">
                        <div class="colCont">
                            <button type="button" id="addItem" class="btn1">إضافة</button>
                        </div>

                        <div class="colCont">
                            <label class="form-label">كمية الإرجاع</label>
                            <input type="number" id="itemQuantity" class="form-control" min="1" />
                            <small id="originalQuantityInfo" class="text-muted" style="display:none;">
                                الكمية الأصلية: <span id="originalQuantityValue">0</span>
                            </small>
                        </div>

                        <div class="colCont">
                            <label class="form-label">الصنف</label>
                            <select id="itemId" class="form-select" disabled>
                                <option value="">-- اختر الصنف --</option>
                            </select>
                        </div>

                        <div class="colCont">
                            <label class="form-label">نوع العنصر</label>
                            <select id="itemType" class="form-select">
                                <option value="">-- اختر النوع --</option>
                                <option value="Paper">ورق</option>
                                <option value="Ink">حبر</option>
                                <option value="Supply">مستلزمات</option>
                            </select>
                        </div>

                    </div>
                </div>
            </div>

            <!-- Selected items for return -->
            <div class="card mt-4 border-info shadow-sm">

                <h5 class="mb-0">العناصر المضافه للاسترجاع</h5>

                <div class="card-body">
                    <div class="tableContainer">
                        <table>
                            <thead>
                                <tr>
                                    <th>نوع الصنف</th>
                                    <th>الصنف</th>
                                    <th>الكمية الأصلية</th>
                                    <th>كمية الإرجاع</th>
                                    <th>الإجراءات</th>
                                </tr>
                            </thead>
                            <tbody id="itemsTableBody"></tbody>
                        </table>
                    </div>
                    <div id="noSelectedItemsMessage" class="alert alert-warning" style="display:none;">
                        لم يتم تحديد أي أصناف للإرجاع بعد
                    </div>
                </div>
            </div>

            <div id="hiddenItemsContainer"></div>

            <div class="colCont">
                <button type="submit" id="submitBtn" class="btn1">حفظ</button>
            </div>
        </form>
    </div>
</body>




@section Scripts {
    <script>
        $(document).ready(function () {
            // Toggle between job order and purchase order sections
            $('#returnType').change(function () {
                const selectedType = $(this).val();
                $('#jobOrderSection, #purchaseOrderSection, #manualAdditionSection').hide();
                $('#jobOrderSelect, #purchaseOrderSelect').val('');
                items = [];
                renderItems();

                if (selectedType === 'job') {
                    $('#jobOrderSection').show();
                    $('#returnInOut').prop('checked', true);
                } else if (selectedType === 'purchase') {
                    $('#purchaseOrderSection').show();
                    $('#returnInOut').prop('checked', false);
                }
            });

            let items = [];
            let editIndex = -1;
            let orderItems = [];

            // Load items for a job order
            $('#jobOrderSelect').change(function () {
                const jobOrderId = $(this).val();
                if (!jobOrderId) {
                    $('#manualAdditionSection').hide();
                    orderItems = [];
                    return;
                }
                $.get('/Inventory/GetJobOrderItems', { jobOrderId }, function (data) {
                    orderItems = data;
                    $('#manualAdditionSection').show();
                    populateItemTypes();
                }).fail(xhr => alert('Error loading job order items: ' + xhr.responseText));
            });

            // Load items for a purchase order
            $('#purchaseOrderSelect').change(function () {
                const purchaseId = $(this).val();
                if (!purchaseId) {
                    $('#manualAdditionSection').hide();
                    orderItems = [];
                    return;
                }
                $.get('/Inventory/GetPurchaseOrderItems', { purchaseId }, function (data) {
                    orderItems = data;
                    $('#manualAdditionSection').show();
                    populateItemTypes();
                }).fail(xhr => alert('Error loading purchase order items: ' + xhr.responseText));
            });

            function populateItemTypes() {
                const $itemType = $('#itemType');
                $itemType.empty().append('<option value="">-- اختر النوع --</option>');
                const unique = [...new Set(orderItems.map(i => i.itemType))];
                unique.forEach(type => {
                    $itemType.append(`<option value="${type}">${type}</option>`);
                });
            }

            // When a type is chosen, fill the item dropdown
            $('#itemType').change(function () {
                const selectedType = $(this).val();
                const $itemSelect = $('#itemId');
                $itemSelect.empty().prop('disabled', !selectedType)
                    .append('<option value="">-- اختر الصنف --</option>');
                if (!selectedType) return;

                orderItems
                    .filter(i => i.itemType === selectedType)
                    .forEach(item => {
                        const id = item.itemId || item.paperId || item.inkId || item.suppliesId;
                        const name = item.name;
                        const qty = item.quantity || 0;
                        $itemSelect.append(
                            `<option value="${id}" data-quantity="${qty}">${name} (ID: ${id}) - الكمية: ${qty}</option>`
                        );
                    });
            });

            // Show original quantity when an item is selected
            $('#itemId').change(function () {
                const qty = parseInt($(this).find(':selected').data('quantity')) || 0;
                $('#originalQuantityValue').text(qty);
                $('#originalQuantityInfo').show();
                $('#itemQuantity').attr('max', qty).val('');
            });

            // Add or edit an item in the list
            $('#addItem').click(function () {
                const type = $('#itemType').val();
                const id = $('#itemId').val();
                const name = $('#itemId option:selected').text().split(' (ID:')[0].trim();
                const orig = parseInt($('#originalQuantityValue').text());
                const qty = parseInt($('#itemQuantity').val());

                if (!type || !id || !qty || qty <= 0) {
                    return alert('Please fill all fields correctly');
                }
                if (qty > orig) {
                    return alert(`Return quantity (${qty}) exceeds original quantity (${orig})`);
                }

                const newItem = { itemType: type, itemId: id, itemName: name, originalQuantity: orig, quantity: qty };

                if (editIndex === -1) {
                    const idx = items.findIndex(i => i.itemType === type && i.itemId == id);
                    if (idx !== -1) items[idx].quantity += qty;
                    else items.push(newItem);
                } else {
                    items[editIndex] = newItem;
                    editIndex = -1;
                }
                console.log(newItem);
                console.log(items);

                renderItems();
                resetItemForm();
            });

            function renderItems() {
                const $tb = $('#itemsTableBody'), $hc = $('#hiddenItemsContainer');
                $tb.empty(); $hc.empty();
                items.forEach((it, i) => {
                    $tb.append(`
                            <tr data-index="${i}">
                                <td>${it.itemType}</td>
                                <td>${it.itemName}</td>
                                <td>${it.originalQuantity}</td>
                                <td>${it.quantity}</td>
                                <td>
                                    <button class="btn btn-warning btn-sm editItem">التعديل</button>
                                    <button class="btn btn-danger btn-sm deleteItem">حذف</button>
                                </td>
                            </tr>
                        `);
                    let inputs = '';
                    if (it.itemType === 'Paper' || it.itemType === 'الورق')
                        inputs += `<input type="hidden" name="BridgeList[${i}].PaperId" value="${it.itemId}" />`;
                    else if (it.itemType === 'Ink' || it.itemType === 'الحبر')
                        inputs += `<input type="hidden" name="BridgeList[${i}].InkId" value="${it.itemId}" />`;
                    else if (it.itemType === 'Supply' || it.itemType === 'المتلزمات')
                        inputs += `<input type="hidden" name="BridgeList[${i}].SuppliesId" value="${it.itemId}" />`;
                    inputs += `<input type="hidden" name="BridgeList[${i}].Quantity" value="${it.quantity}" />`;
                    $hc.append(inputs);
                    console.log(inputs)
                });
                $('#noSelectedItemsMessage').toggle(items.length === 0);

            }

            function resetItemForm() {
                $('#itemType').val('');
                $('#itemId').empty().prop('disabled', true);
                $('#itemQuantity').val('');
                $('#originalQuantityInfo').hide();
            }

            // Edit & Delete handlers
            $('#itemsTableBody')
                .on('click', '.deleteItem', function () {
                    items.splice($(this).closest('tr').data('index'), 1);
                    renderItems();
                })
                .on('click', '.editItem', function () {
                    const i = $(this).closest('tr').data('index'), it = items[i];
                    $('#itemType').val(it.itemType).trigger('change');
                    setTimeout(() => {
                        $('#itemId').val(it.itemId);
                        $('#originalQuantityValue').text(it.originalQuantity);
                        $('#itemQuantity').val(it.quantity);
                        editIndex = i;
                    }, 300);
                });

            // Form validation
            $('#returnOrderForm').submit(function (e) {
                if (!items.length) {
                    e.preventDefault(); alert('Please add at least one item');
                    return false;
                }
                const t = $('#returnType').val();
                if (t === 'job' && !$('#jobOrderSelect').val()) {
                    e.preventDefault(); alert('Please select a job order'); return false;
                }
                if (t === 'purchase' && !$('#purchaseOrderSelect').val()) {
                    e.preventDefault(); alert('Please select a purchase order'); return false;
                }
                return true;
            });
        });
    </script>
}