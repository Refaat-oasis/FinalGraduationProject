@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor


@{

    int jobRole = HttpContextAccessor.HttpContext.Session.GetInt32("JobRole") ?? 0;
    Console.WriteLine("JobRole: " + jobRole);
}

@model ThothSystemVersion1.DataTransfereObject.ReturnOrderDTO

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewBag.Title</title>

    <!-- Bootstrap CSS RTL -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.rtl.min.css" rel="stylesheet">

    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">


    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
    <link href="~/css/Inventory/ReturnOrder.css" rel="stylesheet" />


    <link rel="stylesheet" href="Home.css" />
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="icon" type="image/x-icon" href="/image/eye.jpg" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Alexandria:wght@100..900&display=swap" rel="stylesheet" />
    <link href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />



</head>

<div class="arrow">
    @{
        // admin
        if (jobRole == 0)
        {
            <a asp-controller="employee" asp-action="adminhome" class="back">
                <i class='bx bx-left-arrow-circle' style="font-size: 40px; color: white;"></i>
            </a>

        } // inventory manager
        else if (jobRole == 1)
        {
            <a asp-controller="employee" asp-action="inventoryManager" class="back">
                <i class='bx bx-left-arrow-circle' style="font-size: 40px; color: white;"></i>
            </a>
        }
        else if (jobRole == 2)
        {
            <a asp-controller="employee" asp-action="inventoryClerk" class="back">
                <i class='bx bx-left-arrow-circle' style="font-size: 40px; color: white;"></i>
            </a>
        }


    }
</div>

<div class="container">
    <h1>المرتجعات</h1>
    @* Success and Error Messages *@
    @if (TempData["Success"] != null)
    {
        <div class="notification success">
            <div class="notification-content">
                <i class='bx bx-check-circle'></i> @TempData["Success"]

            </div>
            <input type="hidden" id="tempDataSuccess" value="true" />
            <div class="progress-bar success"></div>
        </div>
    }

    @if (TempData["Error"] != null)
    {
        <div class="notification error">
            <div class="notification-content">
                <i class='bx bx-error-circle'></i>
                <span>@TempData["Error"]</span>
            </div>
            <input type="hidden" id="tempDataSuccess" value="false" />

            <div class="progress-bar error"></div>

        </div>
    }
    <input type="hidden" id="hdnJobRole" value="@jobRole" />


    <form asp-action="ReturnOrder" asp-controller="Inventory" id="returnOrderForm" class="form-container" method="post">

        <div class="rowCont">
            <div class="colCont">
                <label class="form-label">نوع الإرجاع</label>
                <select id="returnType" class="form-select">
                    <option value="">-- اختر نوع الإرجاع --</option>
                    <option value="job">إرجاع من أمر تشغيل</option>
                    <option value="purchase">إرجاع إلى المورد</option>
                </select>
            </div>
            <div class="colCont">
                <div class="form-label">
                    <input class="form-check-input" type="checkbox" asp-for="ReturnInOut" id="returnInOut">
                    <label class="form-check-label" for="returnInOut">
                        إضافة للمخزون
                    </label>
                </div>
            </div>
        </div>

        <div class="rowCont" id="jobOrderSection" style="display:none;">
            <div class="colCont">
                <label asp-for="JobOrderId" class="form-label">اختر أمر التشغيل</label>
                <select asp-for="JobOrderId" id="jobOrderSelect" class="form-select">
                    <option value="">-- اختر أمر التشغيل --</option>
                    @if (ViewBag.JobOrderList != null)
                    {
                        foreach (var job in ViewBag.JobOrderList)
                        {
                            <option value="@job.JobOrderId">@job.JobOrderId - @(job.Customer?.CustomerName ?? "بدون عميل")</option>
                        }
                    }
                </select>
                <span asp-validation-for="JobOrderId" class="text-danger"></span>
            </div>
        </div>

        <div class="rowCont" id="purchaseOrderSection" style="display:none;">
            <div class="colCont">
                <label asp-for="purchaseID" class="form-label">اختر أمر الشراء</label>
                <select asp-for="purchaseID" id="purchaseOrderSelect" class="form-select">
                    <option value="">-- اختر أمر الشراء --</option>
                    @if (ViewBag.PurchaseOrderList != null)
                    {
                        foreach (var purchase in ViewBag.PurchaseOrderList)
                        {
                            <option value="@purchase.PurchaseId">@purchase.PurchaseId - @(purchase.Vendor?.VendorName ?? "بدون مورد")</option>
                        }
                    }
                </select>
                <span asp-validation-for="purchaseID" class="text-danger"></span>
            </div>
        </div>

        <div class="rowCont">
            <div class="colCont">
                <label asp-for="ReturnsNotes" class="form-label">ملاحظات الإرجاع</label>
                <textarea asp-for="ReturnsNotes" class="form-control" rows="2"></textarea>
            </div>
        </div>
        <h5 class="mb-0">اضافه العنصر</h5>
        <div class="rowCont">
            <div class="colCont">
                <label class="form-label">نوع الصنف</label>
                <select id="itemType" class="form-select">
                    <option value="">-- اختر النوع --</option>
                    <option value="Paper">ورق</option>
                    <option value="Ink">حبر</option>
                    <option value="Supply">مستلزمات</option>
                    <option value="SparePart">قطع غيار</option>

                </select>
            </div>

            <div class="colCont">
                <label class="form-label">الصنف</label>
                <select id="itemId" class="form-select" disabled>
                    <option value="">-- اختر الصنف --</option>
                </select>
            </div>

            
                <div class="colCont">
                    <label id="quantityLabel" class="form-label">كمية الإرجاع</label>
                    <input type="number" id="itemQuantity" class="form-control" min="1" />
                    <small id="originalQuantityInfo" class="text-muted" style="display:none;">
                        الكمية الأصلية: <span id="originalQuantityValue">0</span>
                    </small>
                </div>

                <div class="colCont">
                    <button type="button" id="addItem" class="btn1">إضافة</button>
                </div>
                </div>
            
            <h5 class="mb-0">الأصناف المحددة للإرجاع</h5>


                <div class ="tableContainer1">
                    <table>
                        <thead>
                            <tr>
                                <th>نوع الصنف</th>
                                <th>الصنف</th>
                                <th>الكمية الأصلية</th>
                                <th>كمية الإرجاع</th>
                                <th>الإجراءات</th>
                            </tr>
                        </thead>
                        <tbody id="itemsTableBody"></tbody>
                    </table>
                </div>
                <div id="noSelectedItemsMessage" class="alert alert-warning" style="display:none;">
                    لم يتم تحديد أي أصناف للإرجاع بعد
                </div>
           


            <div id="hiddenItemsContainer"></div>

            <div class="colCont1">
                <button type="submit" id="submitBtn" class="btn1">حفظ أمر الإرجاع</button>
            </div>
    </form>
</div>
@section Scripts {
    <script>
        $(document).ready(function () {
            let items = [];
            let editIndex = -1;
            let orderItems = [];

            function isInkPurchaseReturn() {
                return $('#returnType').val() === 'purchase' &&
                       $('#itemType').val() === 'الحبر';
            }

            function updateLabels() {
                const isInkPurchase = isInkPurchaseReturn();
                $('#quantityLabel').text(isInkPurchase ? 'عدد الوحدات المرتجعة' : 'كمية الإرجاع');
                $('th:nth-child(3)').text(isInkPurchase ? 'عدد الوحدات الأصلية' : 'الكمية الأصلية');
                $('th:nth-child(4)').text(isInkPurchase ? 'عدد الوحدات المرتجعة' : 'كمية الإرجاع');
            }

            $('#returnType').change(function () {
                const selectedType = $(this).val();
                $('#jobOrderSection, #purchaseOrderSection').hide();
                $('#jobOrderSelect, #purchaseOrderSelect').val('');
                items = [];
                renderItems();

                if (selectedType === 'job') {
                    $('#jobOrderSection').show();
                    $('#returnInOut').prop('checked', true);
                } else if (selectedType === 'purchase') {
                    $('#purchaseOrderSection').show();
                    $('#returnInOut').prop('checked', false);
                }

                updateLabels();
            });

            $('#jobOrderSelect').change(function () {
                const jobOrderId = $(this).val();
                if (!jobOrderId) {
                    orderItems = [];
                    return;
                }

                $.get('/Inventory/GetJobOrderItems', { jobOrderId }, function (data) {
                    orderItems = data;
                    updateItemTypeDropdown();
                    updateLabels();
                }).fail(xhr => alert('حدث خطأ أثناء تحميل بيانات الطلبية: ' + xhr.responseText));
            });

            $('#purchaseOrderSelect').change(function () {
                const purchaseId = $(this).val();
                if (!purchaseId) {
                    orderItems = [];
                    return;
                }

                $.get('/Inventory/GetPurchaseOrderItems', { purchaseId }, function (data) {
                    orderItems = data;
                    updateItemTypeDropdown();
                    updateLabels();
                }).fail(xhr => alert('حدث خطأ أثناء تحميل بيانات أمر الشراء: ' + xhr.responseText));
            });

            function updateItemTypeDropdown() {
                const $itemType = $('#itemType');
                $itemType.empty().append('<option value="">-- اختر النوع --</option>');
                const uniqueTypes = [...new Set(orderItems.map(item => item.itemType))];
                uniqueTypes.forEach(type => {
                    $itemType.append(`<option value="${type}">${type}</option>`);
                });
            }

            $('#itemType').change(function () {
                const selectedType = $(this).val();
                const $itemSelect = $('#itemId');
                $itemSelect.empty().append('<option value="">-- اختر الصنف --</option>');

                if (!selectedType) {
                    $itemSelect.prop('disabled', true);
                    return;
                }

                $itemSelect.prop('disabled', false);

                orderItems
                    .filter(item => item.itemType === selectedType)
                    .forEach(item => {
                        $itemSelect.append(`<option value="${item.itemId}" data-quantity="${item.quantity}">${item.name}</option>`);
                    });

                updateLabels();
            });

            $('#itemId').change(function () {
                const selectedOption = $(this).find('option:selected');
                const qty = parseInt(selectedOption.data('quantity')) || 0;
                const isInkPurchase = isInkPurchaseReturn();

                $('#originalQuantityValue').text(qty);
                $('#originalQuantityInfo').html(
                    isInkPurchase
                        ? 'عدد الوحدات الأصلية: <span id="originalQuantityValue">' + qty + '</span>'
                        : 'الكمية الأصلية: <span id="originalQuantityValue">' + qty + '</span>'
                ).show();

                $('#itemQuantity').attr('max', qty).val('').attr('min', 1);
            });

            $('#addItem').click(function () {
                const type = $('#itemType').val();
                const id = $('#itemId').val();
                const name = $('#itemId option:selected').text();
                const origQty = parseInt($('#originalQuantityValue').text());
                const returnQty = parseInt($('#itemQuantity').val());
                const isInkPurchase = isInkPurchaseReturn();

                if (!type || !id || isNaN(returnQty)) {
                    return alert('الرجاء ملء جميع البيانات بشكل صحيح');
                }
                if (returnQty <= 0) {
                    return alert('يجب إدخال قيمة أكبر من الصفر');
                }
                if (returnQty > origQty) {
                    return alert(
                        isInkPurchase
                            ? `عدد الوحدات المرتجعة (${returnQty}) أكبر من عدد الوحدات الأصلية (${origQty})`
                            : `كمية الإرجاع (${returnQty}) أكبر من الكمية الأصلية (${origQty})`
                    );
                }

                const newItem = {
                    itemType: type,
                    itemId: id,
                    itemName: name,
                    originalQuantity: origQty,
                    quantity: returnQty,
                    isInkPurchase: isInkPurchase
                };

                if (editIndex === -1) {
                    const existingItem = items.find(i => i.itemType === type && i.itemId == id);
                    if (existingItem) {
                        existingItem.quantity += returnQty;
                    } else {
                        items.push(newItem);
                    }
                } else {
                    items[editIndex] = newItem;
                    editIndex = -1;
                }

                renderItems();
                resetItemForm();
            });

            function renderItems() {
                const $tb = $('#itemsTableBody');
                const $hc = $('#hiddenItemsContainer');

                $tb.empty();
                $hc.empty();

                items.forEach((item, index) => {
                    $tb.append(`
                        <tr data-index="${index}">
                            <td>${item.itemType}</td>
                            <td>${item.itemName}</td>
                            <td>${item.originalQuantity}</td>
                            <td>${item.quantity}</td>
                            <td>
                                <button type="button" class="btn">تعديل</button>
                                <button type="button" class="btn">حذف</button>
                            </td>
                        </tr>
                    `);

                    const fieldPrefix = `BridgeList[${index}]`;
                    let inputs = '';

                    if (item.itemType === 'الورق') {
                        inputs += `<input type="hidden" name="${fieldPrefix}.PaperId" value="${item.itemId}" />`;
                    }
                    else if (item.itemType === 'الحبر') {
                        inputs += `<input type="hidden" name="${fieldPrefix}.InkId" value="${item.itemId}" />`;
                    }
                    else if (item.itemType === 'المستلزمات') {
                        inputs += `<input type="hidden" name="${fieldPrefix}.SuppliesId" value="${item.itemId}" />`;
                    }
                    else if (item.itemType === 'قطع غيار') {
                        inputs += `<input type="hidden" name="${fieldPrefix}.SparePartsId" value="${item.itemId}" />`;
                    }

                    const qtyField = item.isInkPurchase ? 'NumberOfUnits' : 'Quantity';
                    inputs += `<input type="hidden" name="${fieldPrefix}.${qtyField}" value="${item.quantity}" />`;

                    $hc.append(inputs);
                });

                $('#noSelectedItemsMessage').toggle(items.length === 0);
                updateLabels();
            }

            function resetItemForm() {
                $('#itemType').val('');
                $('#itemId').empty().prop('disabled', true).append('<option value="">-- اختر الصنف --</option>');
                $('#itemQuantity').val('');
                $('#originalQuantityInfo').hide();
                $('#addItem').text('إضافة');
                editIndex = -1;
            }

            $('#itemsTableBody')
                .on('click', '.deleteItem', function (e) {
                    e.preventDefault();
                    items.splice($(this).closest('tr').data('index'), 1);
                    renderItems();
                })
                .on('click', '.editItem', function (e) {
                    e.preventDefault();
                    editIndex = $(this).closest('tr').data('index');
                    const item = items[editIndex];

                    $('#itemType').val(item.itemType).trigger('change');

                    setTimeout(() => {
                        $('#itemId').val(item.itemId);
                        $('#itemQuantity').val(item.quantity);
                        $('#originalQuantityValue').text(item.originalQuantity);
                        $('#originalQuantityInfo').html(
                            item.isInkPurchase
                                ? 'عدد الوحدات الأصلية: <span id="originalQuantityValue">' + item.originalQuantity + '</span>'
                                : 'الكمية الأصلية: <span id="originalQuantityValue">' + item.originalQuantity + '</span>'
                        ).show();
                        $('#addItem').text('تحديث العنصر');
                    }, 100);
                });

            $('#returnOrderForm').submit(function (e) {
                if (!items.length) {
                    e.preventDefault();
                    alert('من فضلك أضف عنصر واحد على الأقل');
                    return false;
                }
                const t = $('#returnType').val();
                if (t === 'job' && !$('#jobOrderSelect').val()) {
                    e.preventDefault();
                    alert('اختر طلبية');
                    return false;
                }
                if (t === 'purchase' && !$('#purchaseOrderSelect').val()) {
                    e.preventDefault();
                    alert('اختر أمر الشراء');
                    return false;
                }
                return true;
            });
        });
    </script>
}
