@{
    Layout = null;
    @using Microsoft.AspNetCore.Http
    @inject IHttpContextAccessor HttpContextAccessor
    int jobRole = HttpContextAccessor.HttpContext.Session.GetInt32("JobRole") ?? 0;
}
@model Employee
<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>إنشاء كلمة مرور جديدة</title>
    <style>
        body {
            font-family: 'Tajawal', sans-serif;
            /* استخدم مسار الصورة الصحيح بالنسبة لموقعك */
            background-image: url(''./../../wwwroot/image/background - Copy.jpg'');
            background-repeat: no-repeat;
            background-size: cover;
            background-position: center center;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }

        .card {
            background: #ffffff;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
            padding: 2rem;
            width: 360px;
        }

            .card h2 {
                margin-bottom: 1.5rem;
                text-align: center;
                color: #333;
            }

        .form-group {
            margin-bottom: 1.25rem;
        }

            .form-group label {
                display: block;
                margin-bottom: 0.5rem;
                color: #555;
                font-weight: 600;
            }

            .form-group input[type="password"] {
                width: 100%;
                padding: 0.75rem;
                border: 1px solid #ccc;
                border-radius: 6px;
                font-size: 1rem;
                font-family: 'Tajawal', sans-serif;
            }

        .strength-meter {
            height: 8px;
            border-radius: 4px;
            background: #eee;
            overflow: hidden;
            margin-top: 0.5rem;
        }

        .strength-meter-fill {
            height: 100%;
            width: 0;
            transition: width 0.3s ease-in-out;
        }

        .strength-text {
            margin-top: 0.5rem;
            font-size: 0.9rem;
            font-weight: 600;
            text-align: right;
            color: #555;
        }

        .btn-submit {
            width: 100%;
            padding: 0.75rem;
            background: #0066ff;
            border: none;
            border-radius: 6px;
            color: #fff;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            margin-top: 1rem;
            transition: background 0.3s ease;
            font-family: 'Tajawal', sans-serif;
        }

            .btn-submit:disabled {
                background: #aaa;
                cursor: not-allowed;
            }

        .alert {
            padding: 1rem;
            margin-bottom: 1.5rem;
            border-radius: 8px;
            display: flex;
            align-items: center;
            animation: slideIn 0.3s ease-out;
        }

        .alert-success {
            background: #e8f6ef;
            border: 2px solid #4caf50;
            color: #2e7d32;
        }

        .alert-danger {
            background: #ffebee;
            border: 2px solid #ef5350;
            color: #c62828;
        }

        .alert-icon {
            font-size: 1.5rem;
            margin-left: 0.75rem;
        }

      
    </style>
</head>
<body>
    <div class="card">
        <div class="card-body">
            @if (TempData["Success"] != null)
            {
                <div class="alert alert-success" id="successAlert">
                    <div class="alert-icon">✓</div>
                    @TempData["Success"]
                </div>
            }
            @if (TempData["Error"] != null)
            {
                <div class="alert alert-danger" id="errorAlert">
                    <div class="alert-icon">⚠</div>
                    @TempData["Error"]
                </div>
            }
        </div>

        <h2>إنشاء كلمة مرور قوية</h2>
        <form id="passwordForm" asp-controller="Employee" asp-action="RegisterNewPassword" method="post">
            <input type="hidden" asp-for="EmployeeId" />
            <input type="hidden" id="hdnJobRole" value="@jobRole" />

            <div class="form-group">
                <label for="Password">كلمة المرور</label>
                <input type="password" id="Password" asp-for="EmployeePassword" autocomplete="new-password" required />
                <div class="strength-meter">
                    <div id="strengthFill" class="strength-meter-fill"></div>
                </div>
                <div id="strengthText" class="strength-text">&nbsp;</div>
            </div>

            <div class="form-group">
                <label for="ConfirmPassword">تأكيد كلمة المرور</label>
                <input type="password" id="ConfirmPassword" name="ConfirmPassword" autocomplete="new-password" required />
                <div id="matchText" class="strength-text">&nbsp;</div>
            </div>

            <input type="submit" id="submitBtn" class="btn-submit" disabled value="تسجيل">
        </form>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const passwordInput = document.getElementById('Password');
            const confirmInput = document.getElementById('ConfirmPassword');
            const strengthFill = document.getElementById('strengthFill');
            const strengthText = document.getElementById('strengthText');
            const matchText = document.getElementById('matchText');
            const submitBtn = document.getElementById('submitBtn');
            const form = document.getElementById('passwordForm');

            function evaluateStrength(pw) {
                let score = 0;
                if (pw.length >= 8) score += 1;
                if (/[A-Z]/.test(pw)) score += 1;
                if (/[a-z]/.test(pw)) score += 1;
                if (/[0-9]/.test(pw)) score += 1;
                if (/[^A-Za-z0-9]/.test(pw)) score += 1;
                return score;
            }

            function updateStrengthMeter() {
                const pw = passwordInput.value;
                const score = evaluateStrength(pw);
                const percent = (score / 5) * 100;
                strengthFill.style.width = percent + '%';

                let text = '';
                let color = '#ff4d4d';
                switch (score) {
                    case 0:
                    case 1:
                        text = 'ضعيفة'; color = '#ff4d4d'; break;
                    case 2:
                    case 3:
                        text = 'متوسطة'; color = '#ffcc00'; break;
                    case 4:
                        text = 'قوية'; color = '#66cc66'; break;
                    case 5:
                        text = 'قوية جداً'; color = '#009933'; break;
                }
                strengthFill.style.backgroundColor = color;
                strengthText.textContent = text;
                checkFormValidity();
            }

            function checkMatch() {
                if (!confirmInput.value) {
                    matchText.textContent = '';
                    return;
                }
                if (passwordInput.value === confirmInput.value) {
                    matchText.textContent = 'متطابقة';
                    matchText.style.color = '#009933';
                } else {
                    matchText.textContent = 'غير متطابقة';
                    matchText.style.color = '#ff4d4d';
                }
                checkFormValidity();
            }

            function checkFormValidity() {
                const validStrength = evaluateStrength(passwordInput.value) >= 3;
                const match = passwordInput.value && (passwordInput.value === confirmInput.value);
                const isValid = validStrength && match;
                submitBtn.disabled = !isValid;
                return isValid;
            }

            passwordInput.addEventListener('input', updateStrengthMeter);
            confirmInput.addEventListener('input', checkMatch);

            form.addEventListener('submit', function (e) {
                if (!checkFormValidity()) {
                    e.preventDefault();
                    return false;
                }
                submitBtn.disabled = true;
                submitBtn.value = 'جاري المعالجة...';
            });

            // Redirect logic on success
            const successAlert = document.getElementById('successAlert');
            if (successAlert) {
                const jobRoleVal = parseInt(document.getElementById('hdnJobRole').value) || 0;
                const redirectRoutes = {
                    1: '/employee/LoginPage',
                    2: '/employee/LoginPage',
                    3: '/employee/LoginPage',
                    4: '/employee/LoginPage',
                    5: '/employee/LoginPage',
                    6: '/employee/LoginPage',
                    7: '/employee/LoginPage',
                    8: '/employee/LoginPage'
                };

                setTimeout(() => {
                    window.location.href = redirectRoutes[jobRoleVal] || '/Employee/Login';
                }, 3000);
            }
        });
    </script>
</body>
</html>
