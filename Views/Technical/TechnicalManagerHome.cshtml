@model Employee;
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor


@{

    int jobRole = HttpContextAccessor.HttpContext.Session.GetInt32("JobRole") ?? 0;
    string employeeName = HttpContextAccessor.HttpContext.Session.GetString("EmployeeName") ?? "Unknown";
    string employeeId = HttpContextAccessor.HttpContext.Session.GetString("EmployeeID") ?? "Unknown";
    Console.WriteLine("JobRole: " + jobRole);
    Console.WriteLine("EmployeeName: " + employeeName);
    Console.WriteLine("EmployeeId: " + employeeId);
}
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="ar">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />

    <!-- Boxicons for icons -->
    <link href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css"
          rel="stylesheet" />

    <!-- Your page CSS -->
    <link href="~/css/Technical/TechnicalManagerHome.css"
          rel="stylesheet" asp-append-version="true" />

    <link rel="icon"
          type="image/jpeg"
          href="~/image/eye.jpg"
          asp-append-version="true" />
    <link rel="icon" type="image/x-icon" href="/image/eye.jpg" />
    <title>ThoTh</title>

    <style>




        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Cairo', sans-serif;
        }

        body {
            position: relative;
            width: 100%;
            padding: 20px;
            border-radius: 8px;
            background-size: cover;
            display: block;
            overflow: hidden;
        }



            body::before {
                content: "";
                position: absolute;
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-size: contain;
                background-size: cover;
                background: url("/image/brown-bokeh-textured-plain-product-background.jpg");
                opacity: 0.75;
                z-index: -1;
                background-size: cover;
                background-position: center;
            }

        .dashboard-icons {
            display: flex;
            flex-direction: column;
            align-items: flex-start; /* تغيير من flex-end إلى flex-start */
            gap: 10px;
            margin-top: 100px;
            margin-bottom: 0;
            margin-right: 20px;
            position: absolute;
            top: 100px;
            right: 50px;
        }

        .row {
            display: flex;
            flex-direction: row;
            gap: 40px;
            flex-wrap: wrap;
            justify-content: flex-start; /* تغيير من flex-end إلى flex-start */
        }

        .icon-box {
            width: 200px;
            background-color: #FDF5E6;
            border-radius: 12px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            text-align: center;
            padding: 20px 10px;
            transition: all 0.3s ease;
            cursor: pointer;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: flex-start;
            position: relative;
            overflow: visible;
        }

            .icon-box p {
                font-weight: 900 !important;
                font-size: 20px !important;
            }

            .icon-box.active {
                background-color: #2c2c2c;
            }

                .icon-box.active p {
                    color: white !important;
                }

                .icon-box.active .icon-img {
                    filter: brightness(0) invert(1);
                }

            .icon-box:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 12px rgba(0,0,0,0.15);
                border: 3px solid #ffff;
            }

            .icon-box a {
                text-decoretion: none;
            }



        .icon-img {
            width: 80px;
            height: 80px;
            object-fit: cover;
            margin-bottom: 10px;
        }


        .icon-img1 {
            width: 80px;
            height: 80px;
            object-fit: cover;
            margin-bottom: 10px;
            margin-left: 20px;
        }

        .icon-list {
            list-style: none;
            width: 100%;
            text-align: right;
            padding: 0;
            margin: 0;
            position: absolute;
            top: 100%;
            left: 0;
            background-color: #FDF5E6;
            border-radius: 6px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            max-height: 100px;
            opacity: 0;
            overflow-y: auto;
            transition: max-height 0.3s ease, opacity 0.3s ease;
            z-index: 9999;
        }

        .icon-box.active .icon-list {
            max-height: 250px;
            opacity: 1;
        }

        .icon-list li {
            padding: 8px 15px;
            text-align: right;
            border-top: 1px solid #f0f0f0;
        }

            .icon-list li a {
                text-decoration: none;
                color: #333;
                display: block;
                transition: all 0.2s;
                font-weight: 900 !important;
                font-size: 17px !important;
            }

                .icon-list li a:hover {
                    color: white;
                    background-color: #444;
                }

        .container {
            text-align: center;
            margin-top: 60px;
        }

            .container h1 {
                margin-bottom: 10px;
            }

            .container p {
                font-size: 16px;
                color: #333;
            }

        .hello {
            position: absolute;
            top: 50px; /* يمكنك تعديله حسب المسافة المطلوبة */
            left: 50%;
            transform: translateX(-50%);
            color: white;
            font-size: 20px;
            font-weight: 900;
            text-align: center;
        }


        .sub-list {
            display: none;
            padding: 5px 0;
            list-style: none;
            margin: 0;
            background-color: #FDF5E6;
            border-right: 3px solid #ccc;
            border-radius: 0 8px 8px 0;
            box-shadow: 2px 2px 6px rgba(0, 0, 0, 0.05);
            direction: rtl;
        }


        .has-sublist.open .sub-list {
            display: block;
        }


        .main-item {
            cursor: pointer;
            font-weight: bold;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 18px;
            background-color: #FDF5E6;
            transition: background-color 0.3s ease, color 0.3s ease;
            border-bottom: 1px solid #ddd;
            direction: rtl;
            width: 100%;
            box-sizing: border-box;
            border-radius: 6px;
        }


            .main-item:hover {
                background-color: #333;
                color: white;
            }



        .sub-list li {
            padding: 0;
            direction: rtl;
        }


            .sub-list li a {
                display: block;
                width: 100%;
                padding: 12px 20px;
                font-size: 14px;
                color: #333;
                text-decoration: none;
                border-bottom: 1px solid #eee;
                transition: background-color 0.3s ease, color 0.3s ease;
            }


                .sub-list li a:hover {
                    background-color: #444;
                    color: white;
                }

        .sublist2:hover {
            border-radius: 6px;
        }

        a {
            text-decoration: none;
            color: black;
        }


        /* container positioning + hidden by default */
        #reorderMessages {
            position: fixed;
            bottom: 2px;
            left: 20px;
            width: 300px;
            display: none;
            z-index: 9999;
        }
            /* each message style */
            #reorderMessages .msg {
            }

            #reorderMessages .show {
                display: block;
                opacity: 1;
                transform: translateY(0);
            }

        .msg-line {
            /* background-color: #ffebee; /* أحمر للتنبيه */
            background-color: #FDF5E6;
            border: 4px solid #F8E1C4;
            color: black;
            padding: 15px 20px;
            margin: 5px;
            border-radius: 10px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
            font-size: 18px;
            transition: opacity 0.5s ease-in-out, transform 0.5s ease-in-out;
            transform: translateY(-20px);
            direction: rtl;
        }
    </style>
</head>
<body>

    <div class="hello">
        <h1>تحوت يتمني لك يوم سعيد</h1>
        <h1>
            مرحبا يا : @{
                @Html.Raw(HttpContextAccessor.HttpContext.Session.GetString("EmployeeName"))
            }
        </h1>
    </div>

    <div class="dashboard-icons">

        <div class="row">

            <div class="icon-box">
                <a href="@Url.Action("Logout", "Employee")" class="icon-box-link">
                    <img src="~/image/door.png" alt="تسجيل الخروج" class="icon-img1" />
                    <p>تسجيل الخروج</p>
                </a>
            </div>

            <div class="icon-box" onclick="toggleList(this)">
                <img src="~/image/repair.png" alt="الفني" class="icon-img" />
                <p>الفني</p>
                <ul class="icon-list">
                    <li class="has-sublist">
                        <span class="main-item">العملاء</span>
                        <ul class="sub-list">
                            <li>@Html.ActionLink("إضافة عميل", "AddCustomer", "Technical")</li>
                            <li>@Html.ActionLink("عرض جميع العملاء", "ViewAllCustomer", "Technical")</li>
                        </ul>
                    </li>
                    <li class="has-sublist">
                        <span class="main-item">الطلبيات</span>
                        <ul class="sub-list">
                            <li>@Html.ActionLink("عرض جميع الطلبيات", "ViewAllJobOrder", "Technical")</li>
                            <li>@Html.ActionLink("إضافة طلبية جديدة", "CreateNewJobOrder", "Technical")</li>
                        </ul>
                    </li>
                    <li>@Html.ActionLink("إذن الصرف لطلبية", "CreateRequisite", "Technical")</li>
                    <li>@Html.ActionLink("تقرير الطلبيات", "TechnicalReport", "Technical")</li>
                </ul>
            </div>


            <div class="icon-box">
                <a href="@Url.Action("EmployeeProfile", "Employee", new { employeeId })" class="icon-box-link">
                    <img src="~/image/user.png" alt="الملف الشخصي" class="icon-img1" />
                    <p>الملف الشخصي</p>
                </a>
            </div>
        </div>
        <div id="reorderMessages"></div>
    </div>


</body>
</html>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.7/signalr.min.js"
        integrity="sha512-7SRCYIJtR6F8ocwW7UxW6wGKqbSyqREDbfCORCbGLatU0iugBLwyOXpzhkPyHIFdBO0K2VCu57fvP2Twgx1o2A=="
        crossorigin="anonymous" referrerpolicy="no-referrer">
</script>

<script>
    function searchInventory(tableId) {
        var input, filter, table, tr, td, i, j, txtValue;
        input = document.getElementById("searchInput");
        filter = input.value.toUpperCase();
        table = document.getElementById(tableId);
        tr = table.getElementsByTagName("tr");

        // Loop through all table rows (skip the header row)
        for (i = 1; i < tr.length; i++) {
            tr[i].style.display = "none"; // Hide the row by default
            td = tr[i].getElementsByTagName("td");


            for (j = 0; j < td.length; j++) {
                if (td[j]) {
                    txtValue = td[j].textContent || td[j].innerText;
                    if (txtValue.toUpperCase().indexOf(filter) > -1) {
                        tr[i].style.display = "";
                        break;
                    }
                }
            }
        }
    }

                function toggleList(el) {
        const isActive = el.classList.contains("active");


        document.querySelectorAll(".icon-box").forEach(function (box) {
            box.classList.remove("active");
        });


        if (!isActive) {
            el.classList.add("active");
        }
    }




    document.addEventListener("DOMContentLoaded", function () {
        const sublistToggles = document.querySelectorAll(".main-item");

        sublistToggles.forEach(function (toggle) {
            toggle.addEventListener("click", function (event) {
                event.stopPropagation(); // يمنع تنفيذ أي كود في العناصر الأب
                const parentLi = toggle.closest(".has-sublist");
                parentLi.classList.toggle("open");
            });
        });
    });

</script>

<script>
        function showReorderNotification(name) {
      const container = document.getElementById("reorderMessages");

      // create a single line for this notification
      const line = document.createElement("div");
      line.classList.add("msg-line");
      line.innerText = name;

      // ensure the container is visible and append the line
      container.style.display = "block";
      container.appendChild(line);

      // after 5s, fade out & remove this line
      setTimeout(() => {
        line.style.opacity = "0";
        setTimeout(() => {
          container.removeChild(line);
          if (!container.hasChildNodes()) {
            container.style.display = "none";
          }
        }, 500);
      }, 5000);
    }

    (async function() {
      const hub = new signalR.HubConnectionBuilder()
        .withUrl("/InventoryReorderPoint")
        .withAutomaticReconnect()   // optional, but if you keep this, the guard below will prevent re-invocation
        .build();

      let didInvokeChecks = false;

      hub.onreconnecting(error => {
        console.warn("Reconnecting, will not re-run checks");
      });

      hub.onreconnected(connectionId => {
        console.log("Reconnected, skipping initial checks");
      });

      // All low-stock messages come through this one handler:
      hub.on("recieveInventoryBalances", message => {
        console.log("Low-stock message:", message);
        showReorderNotification(message);
      });

            // All low-stock messages come through this one handler:
      hub.on("recieveLate", message => {
        console.log("Late message:", message);
        showReorderNotification(message);
      });

      try {
        await hub.start();
        console.log("SignalR connected");

        if (!didInvokeChecks) {
          didInvokeChecks = true;

          // Fire each check exactly once on first connect
          await Promise.all([
            hub.invoke("checkInventoryBalancePaper"),
            hub.invoke("checkInventoryBalanceInk"),
            hub.invoke("checkInventoryBalanceSupply"),
            hub.invoke("checkInventoryBalanceSpareParts"),
            hub.invoke("checkLateJobOrder"),// technical
            hub.invoke("checkLatePayment"),// acc
            hub.invoke("checkLateReceipt"),//acc

          ]);
        }
      }
      catch (err) {
        console.error("SignalR setup error:", err);
      }
    })();
</script>