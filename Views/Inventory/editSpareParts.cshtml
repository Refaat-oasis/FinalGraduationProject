@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor

@model ThothSystemVersion1.Models.SparePart



@{
    Layout = null;
    ViewBag.Title = "تعديل قطع الغيار";
    var vendors = ViewBag.vendorList as List<Vendor>;
    var papers = ViewBag.PaperList;
    var inks = ViewBag.InkList;
    var supplies = ViewBag.SupplyList;
    var sparepart = ViewBag.sparePartList;

    int jobRole = HttpContextAccessor.HttpContext.Session.GetInt32("JobRole") ?? 0;
}

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/x-icon" href="/image/eye.jpg" />
    <title>ThoTh</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.rtl.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
    <link href="~/css/Inventory/editSpareParts.css" rel="stylesheet" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
</head>

<body>

    <div class="arrow">
        @if (jobRole == 0)
        {
            <a asp-controller="employee" asp-action="adminhome" class="back">
                <i class='bx bx-left-arrow-circle' style="font-size:40px;color:white"></i>
            </a>
        }
        else if (jobRole == 1)
        {
            <a asp-controller="employee" asp-action="InventoryManager" class="back">
                <i class='bx bx-left-arrow-circle' style="font-size:40px;color:white"></i>
            </a>
        }
    </div>
    <div class="form-container">


        <h2>تعديل بيانات قطع غيار : @Model.Name </h2>

        <div class="card-body">
            @* Success/Error Notifications *@
            @if (TempData["Success"] != null)
            {
                <div class="notification success">
                    <div class="notification-content"><i class='bx bx-check-circle'></i> @TempData["Success"]</div>
                    <input type="hidden" id="tempDataSuccess" value="true" />
                    <div class="progress-bar success"></div>
                </div>
            }
            @if (TempData["Error"] != null)
            {
                <div class="notification error">
                    <div class="notification-content"><i class='bx bx-error-circle'></i> @TempData["Error"]</div>
                    <input type="hidden" id="tempDataSuccess" value="false" />
                    <div class="progress-bar error"></div>
                </div>
            }
            <input type="hidden" id="hdnJobRole" value="@jobRole" />


            <form asp-controller="Inventory" asp-action="editSpareParts" method="post" class="needs-validation" novalidate>
                <input type="hidden" name="SparePartsID" asp-for="SparePartsId" />

                <div class="input-control">
                    <label asp-for="@Model.Name" class="textlabel"></label>
                    <input asp-for="@Model.Name" class="place" />
                    <span asp-validation-for="@Model.Name" class="error"></span>
                </div>

                <div class="input-control">
                    <label asp-for="@Model.ReorderPoint" class="textlabel"></label>
                    <input asp-for="@Model.ReorderPoint" class="place" />
                    <span asp-validation-for="@Model.ReorderPoint" class="error"></span>
                </div>


                <div class="input-control">
                    <label asp-for="@Model.Activated" class="textlabel"></label>
                    <select asp-for="@Model.Activated" id="options" class="place">
                        @{
                            if (Model.Activated ?? true)
                            {
                                <option value="true" selected>مفعل</option>
                                <option value="false">غير مفعل</option>
                            }
                            else
                            {
                                <option value="false" selected>غير مفعل</option>
                                <option value="true">مفعل</option>
                            }
                        }
                    </select>
                </div>
                <div class="button-container">
                    <input type="submit" value="تعديل" class="btn btn-primary" />
                </div>
            </form>
        </div>
    </div>

</body>


<script>
     document.addEventListener("DOMContentLoaded", function () {
        const form = document.querySelector("form");
        const nameInput = document.querySelector("input[name='Name']");
        const reorderPointInput = document.querySelector("input[name='ReorderPoint']");

        form.addEventListener("submit", function (event) {
            let isValid = true;
            clearErrors();

            
            if (!nameInput.value.trim()) {
                showError(nameInput, "اسم قطع الغيار مطلوب.");
                isValid = false;
            }

            
            const reorderValue = reorderPointInput.value.trim();
            if (!reorderValue) {
                showError(reorderPointInput, "نقطة إعادة الطلب مطلوبة.");
                isValid = false;
            } else if (isNaN(reorderValue) || Number(reorderValue) < 0) {
                showError(reorderPointInput, "يجب أن تكون نقطة إعادة الطلب رقمًا غير سالب.");
                isValid = false;
            }

            if (!isValid) {
                event.preventDefault();
            }
        });

        function showError(inputElement, message) {
            const errorSpan = inputElement.parentElement.querySelector(".error");
            if (errorSpan) {
                errorSpan.textContent = message;
            }
            inputElement.classList.add("is-invalid");
        }

        function clearErrors() {
            const errorSpans = document.querySelectorAll(".error");
            errorSpans.forEach(span => span.textContent = "");
            const invalidInputs = document.querySelectorAll(".is-invalid");
            invalidInputs.forEach(input => input.classList.remove("is-invalid"));
        }
   

        const tempDataElement = document.getElementById('tempDataSuccess');
        const jobRoleElement = document.getElementById('hdnJobRole');

        // Get values with proper fallbacks
        const hasSuccessMessage = tempDataElement ? tempDataElement.value === 'true' : false;
        const jobRole = jobRoleElement ? parseInt(jobRoleElement.value) : 0;

        console.log("Success message exists:", hasSuccessMessage);
        console.log("Job role:", jobRole);

        // Mapping of job roles to their respective URLs
        const jobRoleRoutes = {
            0: "/employee/AdminHome",
            1: "/employee/inventoryManager",
            2: "/employee/inventoryClerk",
            3: "/employee/TechnicalManager",
            4: "/employee/technicalClerk",
            5: "/employee/CostManager",
            6: "/employee/costClerk"
        };

        if (hasSuccessMessage) {
            setTimeout(function () {
                const redirectUrl = jobRoleRoutes[jobRole] || "/Employee/LoginPage";
                window.location.href = redirectUrl;
            }, 3000);
        }

    });
</script>



