 @using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor

 @model ThothSystemVersion1.DataTransfereObject.JobOrderDTO

@{

    int jobRole = HttpContextAccessor.HttpContext.Session.GetInt32("JobRole") ?? 0;
    Console.WriteLine("JobRole: " + jobRole);
}

@{
    ViewData["Title"] = "إنشاء أمر عمل جديد";

    // Initialize dates safely
    var startDate = Model?.StartDate ?? DateOnly.FromDateTime(DateTime.Today);
    var minEndDate = startDate.AddDays(1).ToString("yyyy-MM-dd");
}
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewBag.Title</title>

    <!-- Bootstrap CSS RTL -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.rtl.min.css" rel="stylesheet">

    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">


    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
    <link href="~/css/TechnicalClerk/createNewJobOrder.css" rel="stylesheet" />


    <link rel="stylesheet" href="Home.css" />
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="icon" type="image/x-icon" href="/image/eye.jpg" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Alexandria:wght@100..900&display=swap" rel="stylesheet" />
    <link href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />

    <title>ThoTh</title>

</head>

<body>
    <div class="arrow">
        @{
            // admin
            if (jobRole == 0)
            {
                <a asp-controller="employee" asp-action="adminhome" class="back">
                    <i class='bx bx-left-arrow-circle' style="font-size: 40px; color: white;"></i>
                </a>

            } // inventory manager
            else if (jobRole == 1)
            {
                <a asp-controller="employee" asp-action="inventoryManager" class="back">
                    <i class='bx bx-left-arrow-circle' style="font-size: 40px; color: white;"></i>
                </a>
            }
            else if (jobRole == 2)
            {
                <a asp-controller="employee" asp-action="inventoryClerk" class="back">
                    <i class='bx bx-left-arrow-circle' style="font-size: 40px; color: white;"></i>
                </a>
            }


        }
    </div>

    <div class="form-container">

        <h1>إنشاء أمر عمل جديد</h1>


        @* Success and Error Messages *@
        @if (TempData["Success"] != null)
        {
            <div class="notification success">
                <div class="notification-content">
                    <i class='bx bx-check-circle'></i> @TempData["Success"]

                </div>
                <input type="hidden" id="tempDataSuccess" value="true" />
                <div class="progress-bar success"></div>
            </div>
        }

        @if (TempData["Error"] != null)
        {
            <div class="notification error">
                <div class="notification-content">
                    <i class='bx bx-error-circle'></i>
                    <span>@TempData["Error"]</span>
                </div>
                <input type="hidden" id="tempDataSuccess" value="false" />

                <div class="progress-bar error"></div>

            </div>
        }
        <input type="hidden" id="hdnJobRole" value="@jobRole" />

        <form asp-action="CreateNewJobOrder" method="post" class="needs-validation" novalidate>
            <input type="hidden" asp-for="StartDate" value="@startDate.ToString("yyyy-MM-dd")" />

            <div class="rowCont">
                <!-- Customer Section -->
                <div class="colCont">
                    <label asp-for="CustomerId" class="form-label">العميل</label>
                    <select asp-for="CustomerId" class="form-select" required>
                        <option value="">-- اختر العميل --</option>
                        @if (ViewBag.customerList != null)
                        {
                            @foreach (var customer in ViewBag.customerList as List<Customer>)
                            {
                                <option value="@customer.CustomerId">@customer.CustomerName</option>
                            }
                        }
                    </select>
                    <span asp-validation-for="CustomerId" class="text-danger"></span>
                </div>

                <!-- Employee Section -->
                <div class="colCont">
                    <label asp-for="EmployeeId" class="form-label">المسؤول</label>
                    <select asp-for="EmployeeId" class="form-select" required>
                        <option value="">-- اختر الموظف --</option>
                        @if (ViewBag.employeeList != null)
                        {
                            @foreach (var employee in ViewBag.employeeList as List<Employee>)
                            {
                                <option value="@employee.EmployeeId">@employee.EmployeeName</option>
                            }
                        }
                    </select>
                    <span asp-validation-for="EmployeeId" class="text-danger"></span>
                </div>
            </div>

            <div class="rowCont">
                <!-- Start Date -->
                <div class="colCont">
                    شغيلة</label>
                    <div class="input-group">
                        <span class="input-group-text bg-light">
                            <i class="fas fa-cal
                    <label class="form-label">تاريخ البدأ في التendar-day"></i>
                        </span>
                        <input type="date"
                               class="form-control bg-light"
                               value="@startDate.ToString("yyyy-MM-dd")"
                               readonly />
                    </div>
                </div>

                <!-- End Date -->
                <div class="colCont">
                    <label asp-for="EndDate" class="form-label">تاريخ الانتهاء</label>
                    <input asp-for="EndDate"
                           type="date"
                           class="form-control"
                           min="@minEndDate"
                           required />
                    <span asp-validation-for="EndDate" class="text-danger"></span>
                </div>
            </div>

            <div class="rowCont">
                <!-- Financial Fields - Now with required validation -->
                <div class="colCont">
                    <label asp-for="RemainingAmount" class="form-label">المبلغ المتبقي</label>
                    <div class="input-group">
                        <input asp-for="RemainingAmount" type="number" class="form-control" min="0" required />
                        <span class="input-group-text">ج.م</span>
                    </div>
                    <span asp-validation-for="RemainingAmount" class="text-danger"></span>
                </div>

                <div class="colCont">
                    <label asp-for="EarnedRevenue" class="form-label">الإيراد المكتسب</label>
                    <div class="input-group">
                        <input asp-for="EarnedRevenue" type="number" class="form-control" min="0" required />
                        <span class="input-group-text">ج.م</span>
                    </div>
                    <span asp-validation-for="EarnedRevenue" class="text-danger"></span>
                </div>

                <div class="colCont">
                    <label asp-for="UnearnedRevenue" class="form-label">الإيراد غير المكتسب</label>
                    <div class="input-group">
                        <input asp-for="UnearnedRevenue" type="number" class="form-control" min="0" required />
                        <span class="input-group-text">ج.م</span>
                    </div>
                    <span asp-validation-for="UnearnedRevenue" class="text-danger"></span>
                </div>
            </div>

            <!-- Order Progress - Now with required validation -->
            <div class="row">
                <label asp-for="OrderProgress" class="form-label">حالة الأمر</label>
                <select asp-for="OrderProgress" class="form-select" required>
                    <option value="">-- اختر الحالة --</option>
                    <option value="قيد الانتظار">قيد الانتظار</option>
                    <option value="قيد التشغيل">قيد التشغيل</option>
                    <option value="تم الاستلام">تم الاستلام</option>
                </select>
                <span asp-validation-for="OrderProgress" class="text-danger"></span>
            </div>

            <!-- Notes - Not required -->
            <div class="row">
                <label asp-for="JobOrdernotes" class="form-label">ملاحظات</label>
                <textarea asp-for="JobOrdernotes" class="form-control" rows="3"></textarea>
                <span asp-validation-for="JobOrdernotes" class="text-danger"></span>
            </div>

            <div class="d-grid">
                <button type="submit" class="btn1">حفظ</button>
            </div>
        </form>

    </div>

</body>


<script>
    document.addEventListener('DOMContentLoaded', function() {
        const form = document.querySelector('form.needs-validation');

        if (form) {
            // Add validation on form submission
            form.addEventListener('submit', function(e) {
                // Check all required fields except notes
                const requiredFields = form.querySelectorAll(`
                    [required]:not([name="JobOrdernotes"]),
                    select[name="OrderProgress"],
                    input[name="RemainingAmount"],
                    input[name="EarnedRevenue"],
                    input[name="UnearnedRevenue"]
                `);

                let isValid = true;

                requiredFields.forEach(field => {
                    field.classList.remove('is-invalid');

                    // التحقق من الحقول النصية والأرقام
                    if ((field.type === 'text' || field.type === 'number' || field.type === 'date') && !field.value.trim()) {
                        isValid = false;
                        showError(field, 'هذا الحقل مطلوب');
                    }
                    // التحقق من حقول التحديد
                    else if (field.tagName === 'SELECT' && !field.value) {
                        isValid = false;
                        showError(field, 'هذا الحقل مطلوب');
                    }
                    // التحقق من أن القيم الرقمية ليست سالبة
                    else if (field.type === 'number' && parseFloat(field.value) < 0) {
                        isValid = false;
                        showError(field, 'يجب أن تكون القيمة موجبة');
                    }
                    // التحقق من تاريخ الانتهاء
                    else if (field.name === 'EndDate') {
                        const startDate = new Date('@startDate.ToString("yyyy-MM-dd")');
                        const endDate = new Date(field.value);
                        if (endDate <= startDate) {
                            isValid = false;
                            showError(field, 'تاريخ الانتهاء يجب أن يكون بعد تاريخ البدأ');
                        }
                    }
                });

                if (!isValid) {
                    e.preventDefault();
                    e.stopPropagation();

                    // Scroll to first invalid field
                    const firstInvalid = form.querySelector('.is-invalid');
                    if (firstInvalid) {
                        firstInvalid.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    }

                    alert('يوجد حقول مطلوبة غير مملوءة أو بها أخطاء. الرجاء مراجعة النموذج.');
                }

                form.classList.add('was-validated');
            });

            // Helper function to show errors
            function showError(field, message) {
                field.classList.add('is-invalid');

                if (!field.nextElementSibling || !field.nextElementSibling.classList.contains('invalid-feedback')) {
                    const errorDiv = document.createElement('div');
                    errorDiv.className = 'invalid-feedback';
                    errorDiv.textContent = message;
                    field.parentNode.insertBefore(errorDiv, field.nextSibling);
                } else {
                    field.nextElementSibling.textContent = message;
                }
            }

            // Add real-time validation on field blur
            form.querySelectorAll('[required]:not([name="JobOrdernotes"])').forEach(field => {
                field.addEventListener('blur', function() {
                    if ((this.type === 'text' || this.type === 'number' || this.type === 'date') && !this.value.trim()) {
                        showError(this, 'هذا الحقل مطلوب');
                    } else if (this.tagName === 'SELECT' && !this.value) {
                        showError(this, 'هذا الحقل مطلوب');
                    } else if (this.type === 'number' && parseFloat(this.value) < 0) {
                        showError(this, 'يجب أن تكون القيمة موجبة');
                    } else {
                        this.classList.remove('is-invalid');
                    }
                });
            });

            // Date field specific validation
            const endDateInput = document.getElementById('EndDate');
            if (endDateInput) {
                endDateInput.addEventListener('change', function() {
                    const startDate = new Date('@startDate.ToString("yyyy-MM-dd")');
                    const endDate = new Date(this.value);

                    if (endDate <= startDate) {
                        showError(this, 'تاريخ الانتهاء يجب أن يكون بعد تاريخ البدأ');
                    } else {
                        this.classList.remove('is-invalid');
                    }
                });
            }
        }

        const tempDataElement = document.getElementById('tempDataSuccess');
    const jobRoleElement = document.getElementById('hdnJobRole');

    // Get values with proper fallbacks
    const hasSuccessMessage = tempDataElement ? tempDataElement.value === 'true' : false;
    const jobRole = jobRoleElement ? parseInt(jobRoleElement.value) : 0;

    console.log("Success message exists:", hasSuccessMessage);
    console.log("Job role:", jobRole);

    // Mapping of job roles to their respective URLs
    const jobRoleRoutes = {
        0: "/employee/AdminHome",
        1: "/employee/inventoryManager",
        2: "/employee/inventoryClerk",
        3: "/employee/TechnicalManager",
        4: "/employee/technicalClerk",
        5: "/employee/CostManager",
        6: "/employee/costClerk"
    };

    if (hasSuccessMessage) {
        setTimeout(function () {
            const redirectUrl = jobRoleRoutes[jobRole] || "/Employee/LoginPage";
            window.location.href = redirectUrl;
        }, 3000);
    }
    });
</script>
