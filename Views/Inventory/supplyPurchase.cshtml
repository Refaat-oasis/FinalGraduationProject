@{
    Layout = null;
}

@model ThothSystemVersion1.DataTransfereObject.purchaseOrderDTO
@{
    List<Supply> supplyList = ViewBag.supplyList as List<Supply>;
    List<Vendor> vendorList = ViewBag.vendorList as List<Vendor>;
}

<style>
    body {
        background: linear-gradient(to right, #ff9a9e, #fad0c4);
    }

    .center-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 20px;
        margin-top: 20px;
    }

    .tableContainer {
        width: 60%;
        margin: auto;
    }

    table {
        align-content: center;
        width: 60%;
        margin: 20px;
        border-collapse: separate;
        overflow: hidden;
        border-radius: 15px;
        border: solid black 2px;
        border-spacing: 0;
        box-shadow: 5px 5px 15px rgba(0, 0, 0, 0.5);
    }

    td {
        font-size: 20px;
        text-align: center;
    }

    th, td {
        padding: 10px;
        color: black;
        border: none;
    }

    th {
        font-size: 30px;
        background-color: #FDF5E6;
    }

    tr:nth-child(odd) {
        background-color: #E6B980;
    }

    tr:nth-child(even) {
        background-color: #FDF5E6;
    }

    table tr:hover {
        background-color: #F8E1C4;
        transition: background-color 0.3s ease-in-out;
    }

    .buttons-container {
        display: flex;
        justify-content: center;
        gap: 20px;
    }

    .btn-primary, .btn-success {
        padding: 10px 25px;
        font-size: 20px;
        border-radius: 25px;
        background-color: seagreen;
        color: white;
        cursor: pointer;
    }

    .deleteBtn {
        padding: 10px 15px;
        font-size: 15px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        background-color: red;
        color: white;
        text-decoration: none;
    }

    .editBtn {
        padding: 10px 15px;
        font-size: 15px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        background-color: blue;
        color: white;
        text-decoration: none;
    }

    .btn-primary:hover {
        background-color: #444;
        color: #fff;
        transform: scale(1.05);
        transition: all 0.3s ease-in-out;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 1);
    }

    .input-control {
        margin-left: 25%;
        position: center;
        width: 50%;
    }

    .textlabel {
        display: block;
        font-weight: 15px;
        margin-bottom: 5px;
        color: #090909;
        font-size: 35px;
        text-align: right;
    }

    .place {
        width: 100%;
        padding: 10px;
        border: 1px solid #000000;
        border-radius: 5px;
        font-size: 20px;
        text-align: right;
        direction: rtl;
    }

    h2 {
        text-align: center;
        font-size: 30px;
        color: #050505;
        margin-bottom: 20px;
    }

    h4 {
        text-align: center;
        font-size: 30px;
        color: #050505;
        margin-bottom: 20px;
    }

    .btn-success:hover {
        background-color: #444;
        color: #fff;
        transform: scale(1.05);
        transition: all 0.3s ease-in-out;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 1);
    }
</style>


<h2>إنشاء أمر الشراء </h2>

<form asp-controller="Inventory" asp-action="SupplyPurchase" method="post">

    <div class="input-control">
        <label asp-for="VendorId" class="textlabel"></label>
        <select asp-for="VendorId" class="place" required>
            <option value="">أختر التاجر</option>
            @foreach (var vendor in vendorList)
            {
                <option value="@vendor.VendorId">@vendor.VendorName</option>
            }
        </select>
    </div>

    <div class="input-control">
        <label asp-for="PurchaseNotes" class="textlabel"></label>
        <textarea asp-for="PurchaseNotes" class="place"></textarea>
    </div>

    <h4>عنصر الشراء</h4>
    <div class="input-control">
        <label class="textlabel">أختر المستلزمات</label>
        <select id="supplyDropdown" class="place">
            <option value="">اختر المستلزمات</option>
            @foreach (var supply in supplyList)
            {
                <option value="@supply.SuppliesId"> @supply.Name </option>
            }
        </select>
    </div>
    <div class="input-control">
        <label class="textlabel">الكميه</label>
        <input id="quantityInput" class="place" type="number" min="1" />
    </div>
    <div class="input-control">
        <label class="textlabel">السعر</label>
        <input id="priceInput" class="place" type="number" step="0.01" min="0" />
    </div>

    <div class="center-container">
        <table class="tableContainer" id="itemsTable">
            <thead>
                <tr>
                    <th>الإجراءات</th>
                    <th>الكمية</th>
                    <th>السعر</th>
                    <th>المستلزمات</th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>

        <div class="buttons-container">
            <button type="button" class="btn btn-primary" onclick="addItem()">إضافة عنصر</button>
            <button type="submit" class="btn btn-success">حفظ</button>
        </div>
    </div>
</form>

<script>
    let supplyList = @Html.Raw(Json.Serialize(supplyList));
    let vendorList = @Html.Raw(Json.Serialize(vendorList));

    let editRowIndex = null; // Track the row being edited

    function addItem() {
        let supplyDropdown = document.getElementById("supplyDropdown");
        let quantityInput = document.getElementById("quantityInput");
        let priceInput = document.getElementById("priceInput");

        let selectedSupplyId = supplyDropdown.value;
        let selectedSupplyName = supplyDropdown.options[supplyDropdown.selectedIndex].text;
        let quantity = quantityInput.value;
        let price = priceInput.value;

        let tbody = document.getElementById("itemsTable").getElementsByTagName('tbody')[0];

        // Validation
        if (!selectedSupplyId || !quantity || !price) {
            alert("يجب ملء جميع الحقول");
            return;
        }
        if (quantity <= 0 || price <= 0) {
            alert("يجب إدخال القيم موجبة");
            return;
        }

        if (editRowIndex !== null) {
            // Update existing row
            let row = tbody.rows[editRowIndex];
            row.cells[1].textContent = quantity;
            row.cells[2].textContent = price;
            row.cells[3].textContent = selectedSupplyName;

            // Update hidden inputs
            row.querySelector(".supplyId").value = selectedSupplyId;
            row.querySelector(".quantity").value = quantity;
            row.querySelector(".price").value = price;

            editRowIndex = null; // Reset edit mode
        } else {
            // Add new row
            let row = tbody.insertRow();
            row.innerHTML = `
                <td>
                    <button type="button" class="editBtn" onclick="editItem(this)">تعديل</button>
                    <button type="button" class="deleteBtn" onclick="removeItem(this)">حذف</button>
                </td>
                <td>${quantity}</td>
                <td>${price}</td>
                <td>${selectedSupplyName}</td>
                <input type="hidden" class="supplyId" name="BridgeList[${tbody.rows.length}].SupplyId" value="${selectedSupplyId}" />
                <input type="hidden" class="quantity" name="BridgeList[${tbody.rows.length}].Quantity" value="${quantity}" />
                <input type="hidden" class="price" name="BridgeList[${tbody.rows.length}].Price" value="${price}" />
            `;
        }

        // Clear input fields
        supplyDropdown.value = "";
        quantityInput.value = "";
        priceInput.value = "";
    }

    function editItem(button) {
        let row = button.parentNode.parentNode;
        let supplyDropdown = document.getElementById("supplyDropdown");
        let quantityInput = document.getElementById("quantityInput");
        let priceInput = document.getElementById("priceInput");

        // Get values from the row
        let selectedSupplyName = row.cells[3].textContent;
        let selectedQuantity = row.cells[1].textContent;
        let selectedPrice = row.cells[2].textContent;
        let selectedSupplyId = row.querySelector(".supplyId").value;

        // Populate input fields
        supplyDropdown.value = selectedSupplyId;
        quantityInput.value = selectedQuantity;
        priceInput.value = selectedPrice;

        // Track row index
        editRowIndex = row.rowIndex - 1;
    }

    function removeItem(button) {
        let row = button.parentNode.parentNode;
        row.parentNode.removeChild(row);
        editRowIndex = null;
    }

    // Add form submission validation
    document.querySelector('form').addEventListener('submit', function(e) {
        let tbody = document.getElementById("itemsTable").getElementsByTagName('tbody')[0];

        // Check if there are any items in the table
        if (tbody.rows.length === 0) {
            e.preventDefault(); // Prevent form submission
            alert("يجب إضافة عنصر واحد على الأقل قبل الحفظ");
        }
    });
</script>