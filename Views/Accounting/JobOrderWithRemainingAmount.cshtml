@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@{

    int jobRole = HttpContextAccessor.HttpContext.Session.GetInt32("JobRole") ?? 0;
    Console.WriteLine("JobRole: " + jobRole);
}

@{
    Layout = null;
}
@using ThothSystemVersion1.ViewModels

@model List<JobOrderCustEmpVM>


<head>
    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
    <link href="~/css/Technical/viewAllJobOrder.css" rel="stylesheet" />
</head>
<div class="container">
    <div id="reorderMessages" class="reorderMsg" style="display:none;">
        <button class="close-btn" onclick="closeReorderMessages()">X</button>

    </div>
    <h1>الطلبيات</h1>

    <div class="arrow mb-4">
        @if (jobRole == 0)
        {
            <a asp-controller="Employee" asp-action="AdminHome" class="back">
                <i class="bx bx-left-arrow-circle" style="font-size:40px;color:white;"></i>
            </a>
        }
        else if (jobRole == 7)
        {
            <a asp-controller="Employee" asp-action="AccountingManager" class="back">
                <i class="bx bx-left-arrow-circle" style="font-size:40px;color:white;"></i>
            </a>
        }
        else if (jobRole == 8)
        {
            <a asp-controller="Employee" asp-action="AccountingClerk" class="back">
                <i class="bx bx-left-arrow-circle" style="font-size:40px;color:white;"></i>
            </a>
        }
    </div>

    <div class="search-container">
        <i class='bx bx-search search-icon'></i>
        <input type="text" id="searchInput" onkeyup="searchJobOrder()" placeholder="ابحث عن طلب...">
    </div>
    <div class="tableContainer">
        <table id="jobOrderTable">
            <tr>
                <th colspan="2">الإجراءات</th>
                <th>العميل</th>
                <th>حالة الطلب</th>
                <th>تاريخ الانتهاء</th>
                <th>تاريخ البدء</th>
                <th>الرقم التعريفي للطلبية</th>
            </tr>
            @{
                foreach (JobOrderCustEmpVM job in Model.OrderByDescending(j => j.StartDate))
                {
                    <tr>
                        <td>
                            <a asp-controller="Accounting" asp-action="makeReceipt" asp-route-JobOrderId="@job.JobOrderId" class="editBtn1">طلب استلام اموال</a>
                        </td>
                        <td>
                            <a asp-controller="technical" asp-action="ShowJobOrderSpecifications" asp-route-jobOrderId="@job.JobOrderId" class="editBtn1">اظهار التفاصيل</a>
                        </td>
                        <td>@job.CustomerName</td>
                        <td>@job.OrderProgress</td>
                        <td>@job.EndDate</td>
                        <td>@job.StartDate</td>
                        <td>@job.JobOrderId</td>

                    </tr>
                }
            }
        </table>
    </div>
</div>
<script src="~/js/Technical/viewAllJobOrder.js">
</script>


<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.7/signalr.min.js"
        integrity="sha512-7SRCYIJtR6F8ocwW7UxW6wGKqbSyqREDbfCORCbGLatU0iugBLwyOXpzhkPyHIFdBO0K2VCu57fvP2Twgx1o2A=="
        crossorigin="anonymous" referrerpolicy="no-referrer">
</script>
<script>
    // Create the connection to the SignalR hub
      var hub = new signalR.HubConnectionBuilder()
          .withUrl("/InventoryReorderPoint")
          .build();

     hub.start()
          .then(function () {
              console.log("SignalR connection established.");

              // Invoke the server-side method to check paper reorder points.
              hub.invoke("allLateReceipts")
                 .catch(function (err) {
                     console.error("Error invoking CheckPaperReorderPoint: ", err.toString());
                  });
          })
         .catch(function (err) {
              console.error("SignalR connection error: ", err.toString());
          });

      // Listen for reorder messages from the hub.
      hub.on("getallLateReceipts", function (message) {
          console.log("Received reorder message: ", message);
          var messageDiv = document.getElementById("reorderMessages");
          // Make sure the message div is visible
         messageDiv.style.display = "block";
          // Append the new message rather than replacing previous ones
          messageDiv.innerHTML += "<div>" + message + "</div>";
      });
       function searchJobOrder() {
             var input, filter, table, tr, td, i, j, txtValue;
             input = document.getElementById("searchInput");
             filter = input.value.toUpperCase();
             table = document.getElementById("jobOrderTable");
             tr = table.getElementsByTagName("tr");

             // Loop through all table rows (skip the header row)
             for (i = 1; i < tr.length; i++) {
                 tr[i].style.display = "none"; // Hide the row by default
                 td = tr[i].getElementsByTagName("td");

                 // Loop through all columns in the current row
                 for (j = 0; j < td.length; j++) {
                     if (td[j]) {
                         txtValue = td[j].textContent || td[j].innerText;
                         if (txtValue.toUpperCase().indexOf(filter) > -1) {
                             tr[i].style.display = ""; // Show the row if a match is found
                             break; // Exit the inner loop if a match is found
                         }
                     }
                 }
             }
         }
          function closeReorderMessages() {
                 var messageDiv = document.getElementById("reorderMessages");
                 messageDiv.style.display = "none";
             }
</script>