@model ThothSystemVersion1.DataTransfereObject.ReturnOrderDTO
@{
    List<Paper> papers = ViewBag.PaperList;
    List<Ink> inks = ViewBag.InkList;
    List<Supply> supplies = ViewBag.SupplyList;


}
<form asp-action="getOrderItems" asp-controller="Inventory" id="returnOrderForm" class="form-container" method="post">
    <div class="arrow mb-3">
        <a asp-controller="Admin" asp-action="AdminHome" class="back">
            <i class='bx bx-left-arrow-circle' style="font-size: 40px; color: #0d6efd;"></i>
        </a>
    </div>

    <div class="col-md-6">
        <div class="form-check mt-4">
            <label asp-for="ReturnInOut"></label>
            <input class="form-check-input" type="checkbox" asp-for="ReturnInOut" id="returnInOut">

        </div>
    </div>
    </div>

    <div class="row mb-3" id="jobOrderSection">
        <div class="col-md-6">
            <label asp-for="JobOrderId" class="form-label fw-bold">اختر أمر التشغيل</label>
            <select asp-for="JobOrderId" id="jobOrderSelect" class="form-select">
                <option value="">-- اختر أمر التشغيل --</option>
                @if (ViewBag.JobOrderList != null)
                {
                    foreach (JobOrder job in ViewBag.JobOrderList)
                    {
                        <option value="@job.JobOrderId">@job.JobOrderId - @(job.Customer?.CustomerName ?? "بدون عميل")</option>
                    }
                }
            </select>
            <span asp-validation-for="JobOrderId" class="text-danger"></span>
        </div>
    </div>

    <div class="row mb-3" id="purchaseOrderSection">
        <div class="col-md-6">
            <label asp-for="purchaseID" class="form-label fw-bold">اختر أمر الشراء</label>
            <select asp-for="purchaseID" id="purchaseOrderSelect" class="form-select">
                <option value="">-- اختر أمر الشراء --</option>
                @if (ViewBag.PurchaseOrderList != null)
                {
                    foreach (PurchaseOrder purchase in ViewBag.PurchaseOrderList)
                    {
                        <option value="@purchase.PurchaseId">@purchase.PurchaseId - @(purchase.Vendor?.VendorName ?? "بدون مورد")</option>
                    }
                }
            </select>
            <span asp-validation-for="purchaseID" class="text-danger"></span>
        </div>
    </div>

    <button type="submit" id="submitBtn" class="btn btn-success btn-lg">الامر المنوط بيه الرجوع</button>
</form>



@if (Model.ListOfordered != null && Model.ListOfordered.Any())
{
    <h3 class="mt-4 mb-3 text-center text-primary">تفاصيل الأصناف المرتجعة</h3>
    <table class="table table-bordered text-center">
        <thead class="table-dark">
            <tr>
                <th>النوع</th>
                <th>الكمية</th>
                <th>السعر</th>
                <th>القيمة</th>
            </tr>
        </thead>
        <tbody>
            @foreach (QuantityBridge item in Model.ListOfordered)
            {
                <tr>
                    <td>
                        @if (item.InkId != null)
                        {
                            @* <span>حبر - @item.InkId</span> *@
                            foreach (Ink ik in inks){
                                if (ik.InkId == item.InkId)
                                {
                                    <span> @ik.Name</span>
                                    break;
                                }
                                
                            }
                        }
                        else if (item.PaperId != null)
                        {
                            @* <span>ورق - @item.PaperId</span> *@
                            foreach (Paper pap in papers)
                            {
                                if (pap.PaperId == item.PaperId)
                                {
                                    <span> @pap.Name</span>
                                    break;
                                }

                            }
                        }
                        else if (item.SuppliesId != null)
                        {
                            @* <span>مستلزمات - @item.SuppliesId</span> *@
                            foreach (Supply supp in supplies)
                            {
                                if (supp.SuppliesId == item.SuppliesId)
                                {
                                    <span> @supp.Name</span>
                                    break;
                                }

                            }
                        }
                        else
                        {
                            <span>غير معروف</span>
                        }
                    </td>
                    <td>@item.Quantity</td>
                    <td>@item.Price.ToString("0.00")</td>
                    <td>@item.TotalBalance?.ToString("0.00")</td>
                </tr>
            }
        </tbody>
    </table>
}
else if (ViewBag.Message != null)
{
    <div class="alert alert-warning text-center">
        @ViewBag.Message
    </div>
}





<div class="container mt-4">
    <div class="card shadow">
        <div class="card-header bg-primary text-white text-center">
            <h4>إضافة طلب شراء</h4>
        </div>
        <div class="card-body">

            @* Success and Error Messages *@
            @if (TempData["Success"] != null)
            {
                <div class="alert alert-success">
                    <i class="bx bx-check-circle"></i> @TempData["Success"]
                </div>
            }
            @if (TempData["Error"] != null)
            {
                <div class="alert alert-danger">
                    <i class="bx bx-error-circle"></i> @TempData["Error"]
                </div>
            }

            @using (Html.BeginForm("ReturnOrder2", "Inventory", FormMethod.Post))
            {

                  <div class="col-md-6">
        <div class="form-check mt-4">
            <label asp-for="ReturnInOut"></label>
            <input class="form-check-input" type="checkbox" asp-for="ReturnInOut" id="returnInOut">

        </div>
    </div>

                <div class="row mb-3" id="purchaseOrderSection">
                    <div class="col-md-6">
                        <label asp-for="purchaseID" class="form-label fw-bold">اختر أمر الشراء</label>
                        <select asp-for="purchaseID" id="purchaseOrderSelect" class="form-select">
                            <option value="">-- اختر أمر الشراء --</option>
                            @if (ViewBag.PurchaseOrderList != null)
                            {
                                foreach (PurchaseOrder purchase in ViewBag.PurchaseOrderList)
                                {
                                    <option value="@purchase.PurchaseId">@purchase.PurchaseId - @(purchase.Vendor?.VendorName ?? "بدون مورد")</option>
                                }
                            }
                        </select>
                        <span asp-validation-for="purchaseID" class="text-danger"></span>
                    </div>
                </div>


    <div class="row mb-3" id="jobOrderSection">
        <div class="col-md-6">
            <label asp-for="JobOrderId" class="form-label fw-bold">اختر أمر التشغيل</label>
            <select asp-for="JobOrderId" id="jobOrderSelect" class="form-select">
                <option value="">-- اختر أمر التشغيل --</option>
                @if (ViewBag.JobOrderList != null)
                {
                    foreach (JobOrder job in ViewBag.JobOrderList)
                    {
                        <option value="@job.JobOrderId">@job.JobOrderId - @(job.Customer?.CustomerName ?? "بدون عميل")</option>
                    }
                }
            </select>
            <span asp-validation-for="JobOrderId" class="text-danger"></span>
        </div>
    </div>

  
    <div class="row mb-3">
        <div class="col-12">
            <label asp-for="ReturnsNotes" class="form-label fw-bold">ملاحظات الإرجاع</label>
            <textarea asp-for="ReturnsNotes" class="form-control" rows="2"></textarea>
        </div>
    </div>

 

                <div class="card mt-4 border-primary shadow-sm">
                    <div class="card-header bg-light">
                        <h5 class="mb-0">إضافة عنصر</h5>
                    </div>
                    <div class="card-body">
                        <div class="row g-3">
                            <div class="col-md-3">
                                <label class="form-label fw-bold">نوع العنصر</label>
                                <select id="itemType" class="form-select">
                                    <option value="">-- اختر نوع العنصر --</option>
                                    <option value="Paper">ورق</option>
                                    <option value="Ink">حبر</option>
                                    <option value="Supply">مستلزمات</option>
                                </select>
                            </div>

                            <div class="col-md-3">
                                <label class="form-label fw-bold">العنصر</label>
                                <select id="itemId" class="form-select" disabled>
                                    <option value="">-- اختر العنصر --</option>
                                </select>
                            </div>

                            <div class="col-md-2">
                                <label class="form-label fw-bold">الكمية</label>
                                <input type="number" id="itemQuantity" class="form-control" min="0" />
                            </div>

                            <div class="col-md-2">
                                <label class="form-label fw-bold">السعر</label>
                                <input type="number" id="itemPrice" class="form-control" min="0" step="0.01" />
                            </div>

                            <div class="col-md-2 d-grid">
                                <button type="button" id="addItem" class="btn btn-primary mt-4">أضف العنصر</button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="table-responsive mt-4">
                    <table class="table table-bordered table-hover text-center">
                        <thead class="table-primary">
                            <tr>
                                <th>العنصر</th>
                                <th>الكمية</th>
                                <th>السعر</th>
                                <th>الإجراءات</th>
                            </tr>
                        </thead>
                        <tbody id="itemsTableBody">
                            <!-- Dynamic rows -->
                        </tbody>
                    </table>
                </div>

                <div id="hiddenItemsContainer"></div>
                @* @Html.Hidden("EmployeeId", ViewBag.EmployeeId) *@

                <div class="d-grid mt-3">
                    <button type="submit" class="btn btn-success btn-lg">إرسال الطلب</button>
                </div>
            }
        </div>
    </div>
</div>
@section Scripts {
    <script>
        $(document).ready(function () {
            var items = [];
            var editIndex = -1;

            // Data sources loaded from the server
            const dataSources = {
                Paper: @Html.Raw(Json.Serialize(ViewBag.PaperList)),
                Ink: @Html.Raw(Json.Serialize(ViewBag.InkList)),
                Supply: @Html.Raw(Json.Serialize(ViewBag.SupplyList))
            };

            // When the item type is changed, populate the item dropdown accordingly
            $('#itemType').change(function () {
                var selectedType = $(this).val();
                var $itemSelect = $('#itemId');
                $itemSelect.empty().prop('disabled', !selectedType);
                $itemSelect.append('<option value="">-- اختر --</option>');
                if (!selectedType) return;

                // Loop through the matching list and add each option with the proper id.
                dataSources[selectedType]?.forEach(item => {
                    const id = item.paperId || item.inkId || item.suppliesId;
                    const name = item.name;
                    $itemSelect.append(`<option value="${id}">${name}</option>`);
                });
            });

            // Render the items table and hidden inputs for submission
            function renderItems() {
                var $tableBody = $('#itemsTableBody');
                var $hiddenContainer = $('#hiddenItemsContainer');
                $tableBody.empty();
                $hiddenContainer.empty();

                items.forEach((item, index) => {
                    // Display the item details in the table
                    $tableBody.append(`
                        <tr data-index="${index}">
                            <td>${item.itemName}</td>
                            <td>${item.quantity}</td>
                            <td>${item.price}</td>
                            <td>
                                <button type="button" class="btn btn-warning btn-sm editItem">تعديل</button>
                                <button type="button" class="btn btn-danger btn-sm deleteItem">حذف</button>
                            </td>
                        </tr>
                    `);

                    // Create hidden inputs for the type-specific id, quantity, and price.
                    let hiddenInputs = "";
                    if (item.itemType === "Paper") {
                        hiddenInputs += `<input type="hidden" name="BridgeList[${index}].PaperId" value="${item.itemId}" />`;
                    } else if (item.itemType === "Ink") {
                        hiddenInputs += `<input type="hidden" name="BridgeList[${index}].InkId" value="${item.itemId}" />`;
                    } else if (item.itemType === "Supply") {
                        hiddenInputs += `<input type="hidden" name="BridgeList[${index}].SuppliesId" value="${item.itemId}" />`;
                    }
                    hiddenInputs += `<input type="hidden" name="BridgeList[${index}].Quantity" value="${item.quantity}" />`;
                    hiddenInputs += `<input type="hidden" name="BridgeList[${index}].Price" value="${item.price}" />`;

                    $hiddenContainer.append(hiddenInputs);
                });
            }

            // Add or update an item in the list
            $('#addItem').click(function () {
                var itemType = $('#itemType').val();
                var itemId = $('#itemId').val();
                var itemName = $('#itemId option:selected').text();
                var quantity = parseInt($('#itemQuantity').val());
                var price = parseFloat($('#itemPrice').val());

                if (!itemType || !itemId || isNaN(quantity) || quantity < 0 || isNaN(price) || price < 0) {
                    alert("يرجى تعبئة جميع الحقول بشكل صحيح");
                    return;
                }

                var newItem = { itemType, itemId, itemName, quantity, price };

                if (editIndex === -1) {
                    items.push(newItem);
                } else {
                    items[editIndex] = newItem;
                    editIndex = -1;
                    $('#addItem').text('أضف العنصر');
                }

                // Reset form fields after adding/updating
                $('#itemType').val('');
                $('#itemId').empty().append('<option value="">-- اختر العنصر --</option>').prop('disabled', true);
                $('#itemQuantity').val('');
                $('#itemPrice').val('');
                renderItems();
            });

            // Edit an existing item
            $('#itemsTableBody').on('click', '.editItem', function () {
                editIndex = $(this).closest('tr').data('index');
                var item = items[editIndex];
                $('#itemType').val(item.itemType).trigger('change');
                // Wait a moment for the dropdown to be populated before setting its value.
                setTimeout(() => {
                    $('#itemId').val(item.itemId);
                }, 100);
                $('#itemQuantity').val(item.quantity);
                $('#itemPrice').val(item.price);
                $('#addItem').text('تحديث العنصر');
            });

            // Delete an item from the list
            $('#itemsTableBody').on('click', '.deleteItem', function () {
                var index = $(this).closest('tr').data('index');
                items.splice(index, 1);
                renderItems();
            });

            // Prevent form submission if no items have been added
            $('form').submit(function (e) {
                if ($('#itemsTableBody tr').length === 0) {
                    alert("يجب إضافة عنصر واحد على الأقل قبل إرسال الطلب.");
                    e.preventDefault();
                }
            });

            // Auto-redirect if TempData["Success"] is set (optional)
        @if (TempData["Success"] != null)
        {
            <text>
                            setTimeout(function () {
                                window.location.href = '@Url.Action("adminHome", "AdminHome")';
                            }, 5000);
            </text>
        }
        });
    </script>
}
