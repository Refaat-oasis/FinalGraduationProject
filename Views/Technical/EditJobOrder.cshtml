@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@{
    Layout = null;
}
@model JobOrder

@{

    int jobRole = HttpContextAccessor.HttpContext.Session.GetInt32("JobRole") ?? 0;
    Console.WriteLine("JobRole: " + jobRole);
}

@{
    ViewData["Title"] = "تعديل أمر عمل";

    // Safely format dates
    var startDateFormatted = Model.StartDate.HasValue
        ? Model.StartDate.Value.ToString("yyyy-MM-dd")
        : DateOnly.FromDateTime(DateTime.Today).ToString("yyyy-MM-dd");

    var minEndDate = Model.StartDate.HasValue
        ? Model.StartDate.Value.AddDays(1).ToString("yyyy-MM-dd")
        : DateOnly.FromDateTime(DateTime.Today.AddDays(1)).ToString("yyyy-MM-dd");
}

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewBag.Title</title>

    <!-- Bootstrap CSS RTL -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.rtl.min.css" rel="stylesheet">

    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">


    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
    <link href="~/css/Technical/EditJobOrder.css" rel="stylesheet" />


    <link rel="stylesheet" href="Home.css" />
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="icon" type="image/x-icon" href="/image/eye.jpg" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Alexandria:wght@100..900&display=swap" rel="stylesheet" />
    <link href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />

    <title>ThoTh</title>

</head>
<body>
    <div class="arrow">
        @{
            // admin
            if (jobRole == 0)
            {
                <a asp-controller="employee" asp-action="adminhome" class="back">
                    <i class='bx bx-left-arrow-circle' style="font-size: 40px; color: white;"></i>
                </a>

            } // Technical manager
            else if (jobRole == 3)
            {
                <a asp-controller="employee" asp-action="TechnicalManager" class="back">
                    <i class='bx bx-left-arrow-circle' style="font-size: 40px; color: white;"></i>
                </a>
            } // Technical Clerk
            else if (jobRole == 4)
            {
                <a asp-controller="employee" asp-action="TechnicalClerk" class="back">
                    <i class='bx bx-left-arrow-circle' style="font-size: 40px; color: white;"></i>
                </a>
            }


        }
    </div>

    <div class="form-container">


        <h1>تعديل أمر العمل @Model.JobOrderId</h1>


        @if (TempData["Success"] != null)
        {
            <div class="notification success">
                <div class="notification-content">
                    <i class='bx bx-check-circle'></i> @TempData["Success"]

                </div>
                <input type="hidden" id="tempDataSuccess" value="true" />
                <div class="progress-bar success"></div>
            </div>
        }

        @if (TempData["Error"] != null)
        {
            <div class="notification error">
                <div class="notification-content">
                    <i class='bx bx-error-circle'></i>
                    <span>@TempData["Error"]</span>
                </div>
                <input type="hidden" id="tempDataSuccess" value="false" />

                <div class="progress-bar error"></div>

            </div>
        }}

        <form asp-action="EditJobOrder" method="post">
            <input type="hidden" asp-for="JobOrderId" />

            <!-- عرض بيانات العميل (غير قابلة للتعديل) -->
            <div class="rowCont">
                <div class="colCont">
                    <label class="form-label">العميل</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="fas fa-user-tie"></i></span>
                        <input type="text" class="form-control bg-light"
                               value="@Model.Customer?.CustomerName" readonly>
                    </div>
                    <input type="hidden" asp-for="CustomerId" />
                </div>

                <!-- عرض بيانات الموظف (غير قابلة للتعديل) -->
                <div class="colCont">
                    <label class="form-label">المسؤول</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="fas fa-user-cog"></i></span>
                        <input type="text" class="form-control bg-light"
                               value="@Model.Employee?.EmployeeName" readonly>
                    </div>
                    <input type="hidden" asp-for="EmployeeId" />
                </div>
            </div>

            <div class="rowCont">
                <div class="colCont">
                    <label class="form-label">تاريخ البداية</label>

                    @* <span class="input-group-text"><i class="fas fa-calendar-day"></i></span> *@
                    <input type="date" class="form-control bg-light"
                           value="@startDateFormatted" readonly>

                    <input type="hidden" asp-for="StartDate" value="@startDateFormatted" />
                </div>

                <!-- تاريخ النهاية -->
                <div class="colCont">
                    <label asp-for="EndDate" class="form-label">تاريخ النهاية</label>

                    <input asp-for="EndDate" type="date" min="@minEndDate" class="form-control" >
                    <span asp-validation-for="EndDate" class="text-danger"></span>
                </div>
            </div>

            <!-- الحقول المالية -->
            <div class="rowCont">
                <div class="colCont">
                    <label asp-for="RemainingAmount" class="form-label">المبلغ المتبقي</label>
                    <input asp-for="RemainingAmount" type="number" step="0.01" class="form-control">
                    <span asp-validation-for="RemainingAmount" class="text-danger"></span>
                </div>

                <div class="colCont">
                    <label asp-for="EarnedRevenue" class="form-label">الإيراد المكتسب</label>
                    <input asp-for="EarnedRevenue" type="number" step="0.01" class="form-control">
                    <span asp-validation-for="EarnedRevenue" class="text-danger"></span>
                </div>

                <div class="colCont">
                    <label asp-for="UnearnedRevenue" class="form-label">الإيراد غير المكتسب</label>
                    <input asp-for="UnearnedRevenue" type="number" step="0.01" class="form-control">
                    <span asp-validation-for="UnearnedRevenue" class="text-danger"></span>
                </div>
            </div>

            <!-- حالة العمل -->
            <div class="mb-3">
                <label asp-for="OrderProgress" class="form-label">حالة العمل</label>
                <select asp-for="OrderProgress" class="form-select">
                    <option value="قيد الانتظار">قيد الانتظار</option>
                    <option value="قيد التشغيل">قيد التشغيل</option>
                    <option value="تم التسليم">تم التسليم</option>
                </select>
            </div>

            <!-- الملاحظات -->
            <div class="mb-3">
                <label asp-for="JobOrdernotes" class="form-label">ملاحظات</label>
                <textarea asp-for="JobOrdernotes" class="form-control" rows="3"></textarea>
            </div>

            <div class="d-grid gap-2">
                <button type="submit" class="btn1">حفظ التعديل</button>
            </div>
        </form>

    </div>

</body>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
                document.addEventListener('DOMContentLoaded', function() {
            // Set the preselected value for order progress
            const progressSelect = document.querySelector('#OrderProgress');
            if (progressSelect) {
                const currentProgress = progressSelect.getAttribute('data-current-progress');
                if (currentProgress) {
                    progressSelect.value = currentProgress;
                }
            }

            // Form validation
            const form = document.querySelector('form');
            if (form) {
                form.addEventListener('submit', function(e) {
                    let isValid = true;

                    // Date validation
                    const startDateInput = document.querySelector('[name="StartDate"]');
                    const endDateInput = document.getElementById('EndDate');
                    const dateError = document.getElementById('date-error'); // Add this element in your HTML

                    if (startDateInput && endDateInput) {
                        const startDateValue = startDateInput.value;
                        const endDateValue = endDateInput.value;

                        if (startDateValue && endDateValue) {
                            const startDate = new Date(startDateValue);
                            const endDate = new Date(endDateValue);

                            if (endDate <= startDate) {
                                isValid = false;
                                if (dateError) {
                                    dateError.textContent = 'يجب أن يكون تاريخ النهاية بعد تاريخ البداية';
                                    dateError.style.display = 'block';
                                } else {
                                    alert('يجب أن يكون تاريخ النهاية بعد تاريخ البداية');
                                }
                                endDateInput.focus();
                            }
                        }
                    }

                    // Order progress validation
                    if (progressSelect) {
                        const progressError = document.getElementById('progress-error'); // Add this element in your HTML
                        if (!progressSelect.value) {
                            isValid = false;
                            if (progressError) {
                                progressError.textContent = 'الرجاء تحديد حالة الطلب';
                                progressError.style.display = 'block';
                            } else {
                                alert('الرجاء تحديد حالة الطلب');
                            }
                            progressSelect.focus();
                        }
                    }

                    if (!isValid) {
                        e.preventDefault();
                    }
                });
            }

            // Real-time date validation (optional)
            const endDateInput = document.getElementById('EndDate');
            if (endDateInput) {
                endDateInput.addEventListener('change', function() {
                    const startDateInput = document.querySelector('[name="StartDate"]');
                    const dateError = document.getElementById('date-error');

                    if (startDateInput && startDateInput.value && this.value) {
                        const startDate = new Date(startDateInput.value);
                        const endDate = new Date(this.value);

                        if (endDate <= startDate) {
                            if (dateError) {
                                dateError.textContent = 'يجب أن يكون تاريخ النهاية بعد تاريخ البداية';
                                dateError.style.display = 'block';
                            }
                        } else if (dateError) {
                            dateError.style.display = 'none';
                        }
                    }
                });
            }
        });
                const tempDataElement = document.getElementById('tempDataSuccess');
        const jobRoleElement = document.getElementById('hdnJobRole');

        // Get values with proper fallbacks
        const hasSuccessMessage = tempDataElement ? tempDataElement.value === 'true' : false;
        const jobRole = jobRoleElement ? parseInt(jobRoleElement.value) : 0;

        console.log("Success message exists:", hasSuccessMessage);
        console.log("Job role:", jobRole);

        // Mapping of job roles to their respective URLs
        const jobRoleRoutes = {
            0: "/employee/AdminHome",
            1: "/employee/inventoryManager",
            2: "/employee/inventoryClerk",
            3: "/employee/TechnicalManager",
            4: "/employee/technicalClerk",
            5: "/employee/CostManager",
            6: "/employee/costClerk"
        };

        if (hasSuccessMessage) {
            setTimeout(function () {
                const redirectUrl = jobRoleRoutes[jobRole] || "/Employee/LoginPage";
                window.location.href = redirectUrl;
            }, 3000);
        }
        });
    </script>



    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
}