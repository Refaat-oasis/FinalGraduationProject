@model ThothSystemVersion1.DataTransfereObject.purchaseOrderDTO
@{
    ViewBag.Title = "طلب شراء";
}

<div class="container mt-4">
    <div class="card shadow">
        <div class="card-header bg-primary text-white text-center">
            <h4>إضافة طلب شراء</h4>
        </div>
        <div class="card-body">
            @* Success and Error Messages *@
            @if (TempData["Success"] != null)
            {
                <div class="alert alert-success">
                    <i class="bx bx-check-circle"></i> @TempData["Success"]
                </div>
            }
            @if (TempData["Error"] != null)
            {
                <div class="alert alert-danger">
                    <i class="bx bx-error-circle"></i> @TempData["Error"]
                </div>
            }

            <form method="post" asp-action="purchaseall">
                <div class="row">
                    <!-- Vendor Selection -->
                    <div class="col-md-6">
                        <label for="VendorId" class="form-label fw-bold">التاجر</label>
                        <select name="VendorId" class="form-select" required>
                            <option value="">-- اختر التاجر --</option>
                            @foreach (Vendor vendor in ViewBag.vendorList)
                            {
                                <option value="@vendor.VendorId">@vendor.VendorName</option>
                            }
                        </select>
                    </div>

                    <!-- Purchase Notes -->
                    <div class="col-md-6">
                        <label for="PurchaseNotes" class="form-label fw-bold">ملاحظات عن الشراء</label>
                        <textarea name="PurchaseNotes" class="form-control" rows="2" placeholder="أدخل أي ملاحظات هنا..."></textarea>
                    </div>
                </div>

                <!-- Item Selection -->
                <div class="card mt-4 border-primary shadow-sm">
                    <div class="card-header bg-light">
                        <h5 class="mb-0">إضافة عنصر</h5>
                    </div>
                    <div class="card-body">
                        <div class="row g-3">
                            <div class="col-md-3">
                                <label class="form-label fw-bold">نوع العنصر</label>
                                <select id="itemType" class="form-select" required>
                                    <option value="">-- اختر نوع العنصر --</option>
                                    <option value="Paper">ورق</option>
                                    <option value="Ink">حبر</option>
                                    <option value="Supply">مستلزمات</option>
                                </select>
                            </div>

                            <div class="col-md-3">
                                <label class="form-label fw-bold">العنصر</label>
                                <select id="itemId" class="form-select" required disabled>
                                    <option value="">-- اختر العنصر --</option>
                                </select>
                            </div>

                            <div class="col-md-2">
                                <label class="form-label fw-bold">الكمية</label>
                                <input type="number" id="itemQuantity" class="form-control" min="0" required />
                            </div>

                            <div class="col-md-2">
                                <label class="form-label fw-bold">السعر</label>
                                <input type="number" id="itemPrice" class="form-control" min="0" step="0.01" required />
                            </div>

                            <div class="col-md-2 d-grid">
                                <button type="button" id="addItem" class="btn btn-primary mt-4">أضف العنصر</button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Items Table -->
                <div class="table-responsive mt-4">
                    <table class="table table-bordered table-hover text-center">
                        <thead class="table-primary">
                            <tr>
                                <th>العنصر</th>
                                <th>الكمية</th>
                                <th>السعر</th>
                                <th>الإجراءات</th>
                            </tr>
                        </thead>
                        <tbody id="itemsTableBody">
                            <!-- Dynamic rows will be injected here -->
                        </tbody>
                    </table>
                </div>

                <!-- Hidden inputs to store selected items for BridgeList -->
                <div id="hiddenItemsContainer"></div>

                <input type="hidden" name="EmployeeId" value="@ViewBag.EmployeeId" />

                <div class="d-grid mt-3">
                    <button type="submit" class="btn btn-success btn-lg">إرسال الطلب</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            var items = []; // Array to store added items
            var editIndex = -1; // -1 means not editing any row

            // Populate the "العنصر" dropdown based on selected "نوع العنصر"
            $('#itemType').change(function () {
                var selectedType = $(this).val();
                var itemSelect = $('#itemId');
                itemSelect.empty();
                itemSelect.prop('disabled', !selectedType);

                if (!selectedType) {
                    itemSelect.append('<option value="">-- اختر العنصر --</option>');
                    return;
                }

                itemSelect.append('<option value="">-- اختر --</option>');

                var itemsData = {
                    Paper: @Html.Raw(Json.Serialize(ViewBag.PaperList)),
                    Ink: @Html.Raw(Json.Serialize(ViewBag.InkList)),
                    Supply: @Html.Raw(Json.Serialize(ViewBag.SupplyList))
                };

                itemsData[selectedType]?.forEach(item => {
                    // Use the appropriate id property (paperId, inkId, or suppliesId)
                    var id = item.paperId || item.inkId || item.suppliesId;
                    itemSelect.append(`<option value="${id}">${item.name}</option>`);
                });
            });

            // Render the items table and hidden inputs for model binding
            function renderItems() {
                var tableBody = $('#itemsTableBody');
                var hiddenContainer = $('#hiddenItemsContainer');
                tableBody.empty();
                hiddenContainer.empty();

                items.forEach((item, index) => {
                    // Create table row with edit and delete buttons
                    tableBody.append(`
                        <tr data-index="${index}">
                            <td>${item.itemName}</td>
                            <td>${item.quantity}</td>
                            <td>${item.price}</td>
                            <td>
                                <button type="button" class="btn btn-warning btn-sm editItem">تعديل</button>
                                <button type="button" class="btn btn-danger btn-sm deleteItem">حذف</button>
                            </td>
                        </tr>
                    `);

                    // Generate hidden inputs based on item type for proper binding
                    var hiddenInputs = '';
                    if (item.itemType === "Paper") {
                        hiddenInputs += `<input type="hidden" name="BridgeList[${index}].PaperId" value="${item.itemId}" />`;
                    } else if (item.itemType === "Ink") {
                        hiddenInputs += `<input type="hidden" name="BridgeList[${index}].InkId" value="${item.itemId}" />`;
                    } else if (item.itemType === "Supply") {
                        hiddenInputs += `<input type="hidden" name="BridgeList[${index}].SuppliesId" value="${item.itemId}" />`;
                    }
                    hiddenInputs += `<input type="hidden" name="BridgeList[${index}].Quantity" value="${item.quantity}" />`;
                    hiddenInputs += `<input type="hidden" name="BridgeList[${index}].Price" value="${item.price}" />`;

                    hiddenContainer.append(hiddenInputs);
                });
            }

            // Handle add/update item button click
            $('#addItem').click(function () {
                var itemType = $('#itemType').val();
                var itemId = $('#itemId').val();
                var itemName = $('#itemId option:selected').text();
                var quantity = $('#itemQuantity').val();
                var price = $('#itemPrice').val();

                if (!itemType || !itemId || !quantity || quantity < 0 || !price || price < 0) {
                    alert("يرجى تعبئة جميع الحقول بشكل صحيح");
                    return;
                }

                var newItem = { itemType, itemId, itemName, quantity, price };

                if (editIndex === -1) {
                    items.push(newItem);
                } else {
                    items[editIndex] = newItem;
                    editIndex = -1;
                    $('#addItem').text('أضف العنصر');
                }

                // Clear selection fields
                $('#itemType').val('');
                $('#itemId').empty().append('<option value="">-- اختر العنصر --</option>').prop('disabled', true);
                $('#itemQuantity').val('');
                $('#itemPrice').val('');

                renderItems();
            });

            // Edit item event: populate the fields for editing
            $('#itemsTableBody').on('click', '.editItem', function () {
                editIndex = $(this).closest('tr').data('index');
                var item = items[editIndex];

                $('#itemType').val(item.itemType).trigger('change');
                // Delay to ensure the dropdown is repopulated before setting the item value
                setTimeout(() => $('#itemId').val(item.itemId), 100);
                $('#itemQuantity').val(item.quantity);
                $('#itemPrice').val(item.price);
                $('#addItem').text('تحديث العنصر');
            });

            // Delete item event: remove the row and update hidden inputs
            $('#itemsTableBody').on('click', '.deleteItem', function () {
                items.splice($(this).closest('tr').data('index'), 1);
                renderItems();
            });
        });
    </script>
}
