@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@{

    int jobRole = HttpContextAccessor.HttpContext.Session.GetInt32("JobRole") ?? 0;
    Console.WriteLine("JobRole: " + jobRole);
}


@model Machine

@{
    ViewData["Title"] = "Thoth";
    Layout = null;
}

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewBag.Title</title>

    <!-- Bootstrap CSS RTL -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.rtl.min.css" rel="stylesheet">

    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

    <link rel="icon" type="image/x-icon" href="/image/eye.jpg" />
    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
    <link href="~/css/Cost/EditMachine.css" rel="stylesheet" />

</head>
<body>
    <div class="arrow">
        @{
            // admin
            if (jobRole == 0)
            {
                <a asp-controller="employee" asp-action="adminhome" class="back">
                    <i class='bx bx-left-arrow-circle' style="font-size: 40px; color: white;"></i>
                </a>

            } // inventory manager
            else if (jobRole == 1)
            {
                <a asp-controller="employee" asp-action="inventoryManager" class="back">
                    <i class='bx bx-left-arrow-circle' style="font-size: 40px; color: white;"></i>
                </a>
            }
            else if (jobRole == 2)
            {
                <a asp-controller="employee" asp-action="inventoryClerk" class="back">
                    <i class='bx bx-left-arrow-circle' style="font-size: 40px; color: white;"></i>
                </a>
            }


        }
    </div>
    <div class="form-container">

        <h1> تعديل بيانات الآلة  : @Model.MachineProcessName  </h1>

        @if (TempData["Success"] != null)
        {
            <div class="notification success">
                <div class="notification-content">
                    <i class='bx bx-check-circle'></i> @TempData["Success"]

                </div>
                <input type="hidden" id="tempDataSuccess" value="true" />
                <div class="progress-bar success"></div>
            </div>
        }

        @if (TempData["Error"] != null)
        {
            <div class="notification error">
                <div class="notification-content">
                    <i class='bx bx-error-circle'></i>
                    <span>@TempData["Error"]</span>
                </div>
                <input type="hidden" id="tempDataSuccess" value="false" />

                <div class="progress-bar error"></div>

            </div>
        }
        <form asp-action="EditMachine" method="post">
            <input type="hidden" asp-for="MachineId" />

            <div class="input-control">
                <label asp-for="MachineProcessName" class="textlabel">اسم عملية الآلة</label>
                <input asp-for="MachineProcessName" class="place" />
                <span asp-validation-for="MachineProcessName" class="text-danger"></span>
            </div>

            <div class="input-control">
                <label asp-for="Price" class="textlabel">سعر التشغيل</label>
                <div class="input-group">
                    <input asp-for="Price" class="place" type="number" step="0.01" />
                </div>
                <span asp-validation-for="Price" class="text-danger"></span>
            </div>

            <div class="input-control">
                <label asp-for="@Model.Activated" class="textlabel"> </label>
                <select asp-for="@Model.Activated" id="options" class="place">
                    @{
                        if (Model.Activated)
                        {
                            <option value="true" selected>مفعل</option>
                            <option value="false">غير مفعل</option>
                        }
                        else
                        {
                            <option value="false" selected>غير مفعل</option>
                            <option value="true">مفعل</option>
                        }
                    }
                </select>
            </div>

            <div class="button-container">
                <button type="submit" class="btn">حفظ التعديل </button>

            </div>
        </form>

    </div>
</body>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        $(document).ready(function() {

            setTimeout(function() {
                $('.alert').fadeOut('slow');
            }, 5000);


            $('#Price').on('blur', function() {
                let value = $(this).val().trim();
                if (value !== '') {
                    let numValue = parseFloat(value);
                    if (!isNaN(numValue)) {
                        $(this).val(numValue.toFixed(2));
                    }
                }
                validatePrice();
            });


            function validateMachineName() {
                const machineName = $('#MachineProcessName').val().trim();
                let isValid = true;

                if (machineName === '') {
                    $('#MachineProcessName').next('.text-danger').text('اسم عملية الآلة مطلوب');
                    $('#MachineProcessName').addClass('is-invalid');
                    isValid = false;
                } else if (machineName.length < 3) {
                    $('#MachineProcessName').next('.text-danger').text('يجب أن يكون الاسم على الأقل 3 أحرف');
                    $('#MachineProcessName').addClass('is-invalid');
                    isValid = false;
                } else {
                    $('#MachineProcessName').next('.text-danger').text('');
                    $('#MachineProcessName').removeClass('is-invalid');
                }

                return isValid;
            }


            function validatePrice() {
                const price = $('#Price').val().trim();
                let isValid = true;

                if (price === '') {
                    $('#Price').next('.text-danger').text('سعر التشغيل مطلوب');
                    $('#Price').addClass('is-invalid');
                    isValid = false;
                } else if (isNaN(parseFloat(price))) {
                    $('#Price').next('.text-danger').text('يجب إدخال قيمة رقمية');
                    $('#Price').addClass('is-invalid');
                    isValid = false;
                } else if (parseFloat(price) <= 0) {
                    $('#Price').next('.text-danger').text('يجب أن يكون السعر أكبر من الصفر');
                    $('#Price').addClass('is-invalid');
                    isValid = false;
                } else {
                    $('#Price').next('.text-danger').text('');
                    $('#Price').removeClass('is-invalid');
                }

                return isValid;
            }


            $('#MachineProcessName').on('input', validateMachineName);
            $('#Price').on('input', validatePrice);


            $('form').submit(function(e) {
                let isMachineNameValid = validateMachineName();
                let isPriceValid = validatePrice();

                if (!isMachineNameValid || !isPriceValid) {
                    e.preventDefault();


                    $('html, body').animate({
                        scrollTop: $('.is-invalid').first().offset().top - 100
                    }, 500);
                }
            });

        const tempDataElement = document.getElementById('tempDataSuccess');
        const jobRoleElement = document.getElementById('hdnJobRole');

        // Get values with proper fallbacks
        const hasSuccessMessage = tempDataElement ? tempDataElement.value === 'true' : false;
        const jobRole = jobRoleElement ? parseInt(jobRoleElement.value) : 0;

        console.log("Success message exists:", hasSuccessMessage);
        console.log("Job role:", jobRole);

        // Mapping of job roles to their respective URLs
        const jobRoleRoutes = {
            0: "/employee/AdminHome",
            1: "/employee/inventoryManager",
            2: "/employee/inventoryClerk",
            3: "/employee/TechnicalManager",
            4: "/employee/technicalClerk",
            5: "/employee/CostManager",
            6: "/employee/costClerk"
        };

        if (hasSuccessMessage) {
            setTimeout(function () {
                const redirectUrl = jobRoleRoutes[jobRole] || "/Employee/LoginPage";
                window.location.href = redirectUrl;
            }, 3000);
        }
        });
    </script>
}