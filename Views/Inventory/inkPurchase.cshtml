@{
    Layout = null;
}

@model ThothSystemVersion1.DataTransfereObject.purchaseOrderDTO
@{
    List<Ink> inkList = ViewBag.inkList as List<Ink>;
    List<Vendor> vendorList = ViewBag.vendorList as List<Vendor>;
}
@{
    ViewData["Title"] = "Create Purchase Order";
}

<style>
    body {
        background: linear-gradient(to right, #ff9a9e, #fad0c4);
    }

    .center-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 20px;
        margin-top: 20px;
    }

    .tableContainer {
        width: 60%;
        margin: auto;
    }

    table {
        align-content: center;
        width: 60%;
        margin: 20px;
        border-collapse: separate;
        overflow: hidden;
        border-radius: 15px;
        border: solid black 2px;
        border-spacing: 0;
        box-shadow: 5px 5px 15px rgba(0, 0, 0, 0.5);
    }

    td {
        font-size: 20px;
        text-align: center;
    }

    th, td {
        padding: 10px;
        border: none;
        color: black;
    }

    th {
        font-size: 30px;
        background-color: #FDF5E6;
    }

    tr:nth-child(odd) {
        background-color: #E6B980;
    }

    tr:nth-child(even) {
        background-color: #FDF5E6;
    }

    table tr:hover {
        background-color: #F8E1C4;
        transition: background-color 0.3s ease-in-out;
    }

    .buttons-container {
        display: flex;
        justify-content: center;
        gap: 20px;
    }

    .btn-primary, .btn-success {
        padding: 10px 25px;
        font-size: 20px;
        border-radius: 25px;
        background-color: seagreen;
        color: white;
        cursor: pointer;
    }

    .deleteBtn {
        padding: 10px 15px;
        font-size: 15px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        background-color: red;
        color: white;
        text-decoration: none;
    }

    .editBtn {
        padding: 10px 15px;
        font-size: 15px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        background-color: blue;
        color: white;
        text-decoration: none;
    }

    .btn-primary:hover {
        background-color: #444;
        color: #fff;
        transform: scale(1.05);
        transition: all 0.3s ease-in-out;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 1);
    }

    .input-control {
        margin-left: 25%;
        position: center;
        width: 50%;
    }

    .textlabel {
        display: block;
        font-weight: 15px;
        margin-bottom: 5px;
        color: #090909;
        font-size: 35px;
        text-align: right;
    }

    .place {
        width: 100%;
        padding: 10px;
        border: 1px solid #000000;
        border-radius: 5px;
        font-size: 20px;
        text-align: right;
        direction: rtl;
    }

    h2 {
        text-align: center;
        font-size: 30px;
        color: #050505;
        margin-bottom: 20px;
    }

    h4 {
        text-align: center;
        font-size: 30px;
        color: #050505;
        margin-bottom: 20px;
    }

    .btn-success:hover {
        background-color: #444;
        color: #fff;
        transform: scale(1.05);
        transition: all 0.3s ease-in-out;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 1);
    }
</style>

<h2>إنشاء أمر الشراء </h2>

<form asp-controller="Inventory" asp-action="InkPurchase" method="post">
    <div class="input-control">
        <label asp-for="VendorId" class="textlabel"></label>
        <select asp-for="VendorId" class="place" required>
            <option value="">أختر التاجر</option>
            @foreach (var vendor in vendorList)
            {
                <option value="@vendor.VendorId">@vendor.VendorName</option>
            }
        </select>
    </div>

    <div class="input-control">
        <label asp-for="PurchaseNotes" class="textlabel"></label>
        <textarea asp-for="PurchaseNotes" class="place"></textarea>
    </div>

    <h4>عنصر الشراء</h4>
    <div class="input-control">
        <label class="textlabel">أختر الحبر</label>
        <select id="inkDropdown" class="place">
            <option value="">اختر الحبر</option>
            @foreach (var ink in inkList)
            {
                <option value="@ink.InkId">@ink.Name - @ink.Colored</option>
            }
        </select>
    </div>
    <div class="input-control">
        <label class="textlabel">الكميه</label>
        <input id="quantityInput" class="place" type="number" min="1" />
    </div>
    <div class="input-control">
        <label class="textlabel">السعر</label>
        <input id="priceInput" class="place" type="number" step="0.01" min="0" />
    </div>

    <div class="center-container">
        <table class="tableContainer" id="itemsTable">
            <thead>
                <tr>
                    <th>الإجراءات</th>
                    <th>الكمية</th>
                    <th>السعر</th>
                    <th>الحبر</th>
                </tr>
            </thead>
            <tbody>
                <!-- Items will be added here dynamically -->
            </tbody>
        </table>

        <div class="buttons-container">
            <button type="button" class="btn btn-primary" onclick="addItem()">إضافة عنصر</button>
            <button type="submit" class="btn btn-success">حفظ</button>
        </div>
    </div>
</form>

<script>

        let itemCounter = 0;
        let editRowIndex = null;

        function addItem() {
            let inkDropdown = document.getElementById("inkDropdown");
            let quantityInput = document.getElementById("quantityInput");
            let priceInput = document.getElementById("priceInput");

            let selectedInkId = inkDropdown.value;
            let selectedInkName = inkDropdown.options[inkDropdown.selectedIndex]?.text;
            let quantity = quantityInput.value.trim();
            let price = priceInput.value.trim();

            let tbody = document.getElementById("itemsTable").querySelector('tbody');

            if (!selectedInkId || !quantity || !price) {
                alert("يجب ملء جميع الحقول");
                return;
            }

            if (quantity <= 0 || price <= 0) {
                alert("يجب إدخال القيم موجبة");
                return;
            }

            if (editRowIndex !== null) {
                // Update existing row
                let row = tbody.rows[editRowIndex];
                row.cells[1].textContent = quantity;
                row.cells[2].textContent = price;
                row.cells[3].textContent = selectedInkName;

                row.querySelector(".inkId").value = selectedInkId;
                row.querySelector(".quantity").value = quantity;
                row.querySelector(".price").value = price;

                editRowIndex = null;
            } else {
                // Add new row
                let row = tbody.insertRow();
                row.innerHTML = `
                    <td>
                        <button type="button" class="editBtn" onclick="editItem(this)">تعديل</button>
                        <button type="button" class="deleteBtn" onclick="removeItem(this)">حذف</button>
                    </td>
                    <td>${quantity}</td>
                    <td>${price}</td>
                    <td>${selectedInkName}</td>
                    <td style="display:none;">
                        <input type="hidden" name="BridgeList[${itemCounter}].InkId" class="inkId" value="${selectedInkId}" />
                        <input type="hidden" name="BridgeList[${itemCounter}].Quantity" class="quantity" value="${quantity}" />
                        <input type="hidden" name="BridgeList[${itemCounter}].Price" class="price" value="${price}" />
                    </td>
                `;
                itemCounter++;
            }

            // Clear inputs
            inkDropdown.value = "";
            quantityInput.value = "";
            priceInput.value = "";
        }

        function editItem(button) {
            let row = button.closest("tr");
            let inkDropdown = document.getElementById("inkDropdown");
            let quantityInput = document.getElementById("quantityInput");
            let priceInput = document.getElementById("priceInput");

            let selectedInkId = row.querySelector(".inkId").value;
            let selectedQuantity = row.cells[1].textContent;
            let selectedPrice = row.cells[2].textContent;

            inkDropdown.value = selectedInkId;
            quantityInput.value = selectedQuantity;
            priceInput.value = selectedPrice;

            editRowIndex = row.rowIndex - 1;
        }

        function removeItem(button) {
            let row = button.closest("tr");
            let tbody = row.parentNode;
            row.remove();

            // Update indices
            let rows = tbody.querySelectorAll("tr");
            rows.forEach((row, index) => {
                row.querySelector(".inkId").name = `BridgeList[${index}].InkId`;
                row.querySelector(".quantity").name = `BridgeList[${index}].Quantity`;
                row.querySelector(".price").name = `BridgeList[${index}].Price`;
            });

            itemCounter = rows.length;
            editRowIndex = null;
        }

        document.querySelector('form').addEventListener('submit', function(e) {
            let tbody = document.getElementById("itemsTable").querySelector('tbody');
            if (tbody.rows.length === 0) {
                e.preventDefault();
                alert("يجب إضافة عنصر واحد على الأقل قبل الحفظ");
            }
        });
</script>
